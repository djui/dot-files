[ -z "$PS1" ] && return
shopt -s histappend
shopt -s checkwinsize

####################################################################
## GIT COMPLETION ##################################################
####################################################################

[ -f /etc/bash_completion ] && source /etc/bash_completion
[ -f $HOME/.bin/git-completion.bash ] && source $HOME/.bin/git-completion.bash
export GIT_PS1_SHOWDIRTYSTATE=true

####################################################################
## PROMPT SCRIPT ###################################################
####################################################################

#PS1='\[\033[01;33m\]`stack=$((${#DIRSTACK[*]}-1)) ; if [[ $stack -gt 0 ]] ; then echo -n $stack ; fi`\[\033[01;32m\]\w\[\033[00m\]'
#PS1="\[\033[01;32m\]â—¤$(hostname | cut -c 1) $PS1$(__git_ps1 " \[\033[01;31m\]%s\[\033[00m\]") "
#PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
if [ $INSIDE_EMACS ] ; then
    PS1='\h \w$(__git_ps1 " %s")$ '
else
    PS1='\[\033[01;34m\]\h\[\033[00m\] \[\033[01;32m\]\W\[\033[00m\]$(__git_ps1 " \[\033[01;31m\]%s\[\033[00m\]")$ '
fi

####################################################################
## ALIASES #########################################################
####################################################################

#alias a=''
alias b='emacs ~/.bashrc ; ^vi^source^'
alias c='clear'
alias d='git diff'
#alias e='emacsclient -nw -a ""' ## See e() function
alias ec='emacsclient -nw -c -a ""'
alias en='emacsclient -nw -n -a ""'
alias f='find'
alias g='grep'
alias h='head'
alias i='hostname -I'
##alias j='jumpstart'
#alias k=''
#alias l='ls'
#alias m=''
#alias n=''
##alias o=''
alias p='ps aux'
alias pg='ps aux | grep -i'
#alias q=''
#alias r=''
#alias s=''
alias t='tail'
#alias u=''
#alias v=''
#alias w=''
#alias x=''
#alias y=''
alias z='emacs ~/.zshrc ; ^vi^source^'

alias ..='cd ..'
alias ...='cd ../..'
alias apt-search='apt-cache search'
alias beep='mpg123 -q /home/uwe/Dropbox/Music/glass.mp3 &'
alias cd..='cd ..'
alias cpu='grep -c ^processor /proc/cpuinfo ; grep "^model name" /proc/cpuinfo | sort -u'
alias diff='diff -u'
alias dir='echo "It is time to let MS-DOS go and is Linux."'
alias dirs='dirs -l -v -p'
alias erl2='rlwrap -A -i -r -p White -a -- erl'
alias erlgrep='find . -type f \( -name "*.erl" -o -name "*.hrl" \) | xargs grep --color=auto'
alias kredgrep='find ~/dev/klarna/kred -type f \( -name "*.erl" -o -name "*.hrl" \) | xargs grep --color=auto'
alias imac='ssh -Y 10.20.9.110'
alias joyent='ssh node@djui.no.de' # node@72.2.126.155
alias erlinstall='./otp_build setup --prefix=`pwd`/../../install/R14B02 force_linux_pthread_rwlocks=yes && make install'
alias gb='git branch'
alias gc='git commit'
alias gd='git diff'
alias gh='git lola'
alias gl='git log'
alias gk='gitk'
alias gs='git status'
alias gg='git gui'
alias gr='git remote'
alias gx='gitx'
alias imac='ssh -Y 10.20.9.110'
alias lines='wc -l'
[ $(uname) = "Darwin" ] && alias locate='mdfind -name'
[ $(uname) = "Linux" ] && alias locate='find / -mount -wholename "/proc" -prune -o -iname'
function locate2 {
    case $(uname) in
        "Darwin") mdfind -name $* | grep "^$(pwd)" ;;
        "Linux" ) find / -mount -wholename "/proc" -prune -o -iname $* | grep "^$(pwd)" ;;
    esac
}
alias la='ls -alhp'
#alias ll='if [ "$_" = "-lh" ] ; then echo -e "\033[01;30mBored, nervous or unconcentrated?\033[00m" ; else ls -lh ; fi'
alias ll='ls -lh'
[ $(uname) = "Darwin" ] && alias ls='ls -G'
[ $(uname) = "Linux" ] && alias ls='ls --color=auto'
alias lt='tree -dCL 3'
alias matrix='tr -c "[:digit:]" " " < /dev/urandom | dd cbs=$COLUMNS conv=unblock
| GREP_COLOR="1;32" grep --color "[^ ]"'
alias md='mkdir'
alias mem='grep -o ^MemTotal.* /proc/meminfo'
alias notify='mpg123 -q /home/uwe/Dropbox/Music/glass.mp3 &'
[ $(uname) = "Linux" ] && alias open='xdg-open'
alias otpgrep='find $(which erl)/../../lib -type f \( -name "*.erl" -o -name "*.hrl" -o -name "*.c" -o -name "*.h" \) | xargs grep --color=auto'
alias pd='pushd'
alias ports='lsof -i -P' # -n
alias vpn='[ $(nmcli con status | grep -c "Klarna") = 0 ] && nmcli con up id "Klarna"'
alias whereis='find . -iname'

alias tag='pushd ~/dev/klarna/kred ; ctags --languages=erlang -R ~/dev/klarna/kred/ ~/dev/OTP/install/R14B02/lib/erlang/lib/ ; popd'
alias distel='erl -sname distel -pa $HOME/dev/klarna/kred/lib/*/ebin -pa $HOME/dev/klarna/kred/test/shared/ebin -pa $HOME/.emacs.d/distel/ebin -pa $HOME/dev/riak_core/ebin'
#alias gperf='erl -name gperf -run gperf -pa $HOME/dev/klarna/kred/lib/eper/ebin -pa /usr/local/lib/erlang/lib/gtknode-0.30/ebin/'

####################################################################
## FUNCTIONS #######################################################
####################################################################

function e {
    if [ $SSH_TTY ] ; then
        emacsclient -nw -c -a "" $*
    else
        emacsclient -nw -a "" $*
    fi
}

function o {
  # emacsclient -nw -a $(find . -name $@ -print -quit)
  find $HOME/dev/klarna/kred -name $1.?rl | xargs emacsclient -nw -a ""
}

function google {
    w3m "http://www.google.com/search?q=$@"
}

function encrypt {
    openssl aes-256-cbc -a -salt -in "$1" -out "$1.aes"
    shred --remove "$1"
}

function decrypt {
    openssl aes-256-cbc -d -a -salt -in "$1.aes" -out "$1"
}

function title {
    echo -ne "\033]0;$*\007"
    # echo -ne "\[\033k$*\033\\\]"
}

function 2sv {
e() { if [ $SSH_TTY ] ; then emacsclient -nw -c -a "" $* ; else emacsclient -nw -a "" $* ; fi }
o() { find $HOME/dev/klarna/kred -name $1.?rl | xargs emacsclient -nw -a "" }
rtfm() { help $@ || man $@ || $BROWSER "http://www.google.com/search?q=$@"; }
cmdfu(){ curl "http://www.commandlinefu.com/commands/matching/$@/$(echo -n $@ | openssl base64)/plaintext"; }
google() { w3m "http://www.google.com/search?q=$@" }
encrypt() { openssl aes-256-cbc -a -salt -in "$1" -out "$1.aes" ; shred --remove "$1" }
decrypt() { openssl aes-256-cbc -d -a -salt -in "$1.aes" -out "$1" }
title() { echo -ne "\033]0;$*\007" }
colors() { for c in {0..255} ; do echo -e "\e[38;05;${c}m $c: Test" ; done }
2sv() {
    urlenctext="$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$@")"
    transtext=`curl --silent "http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&q=$urlenctext&langpair=%7Csv" | grep -o "\{\"translatedText\":\"\(.*\)\"\}"`
    echo {${transtext#*:}
}

2en() {
    urlenctext="$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$@")"
    transtext=`curl --silent "http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&q=$urlenctext&langpair=%7Cen" | grep -o "\{\"translatedText\":\"\(.*\)\"\}"`
    echo {${transtext#*:}
}

####################################################################
## EXPORTS #########################################################
####################################################################

export PATH="$HOME/.bin:/usr/local/bin:/usr/local/sbin:$PATH"
export EDITOR="emacs -nw"
# Allow 256 colors in terminal
# Also look here: http://www.xvx.ca/~awg/emacs-colors-howto.txt
# sudo apt-get install ncurses-term
export TERM=xterm-256color

## Make the special character like Umlauts work through SSH on a Mac from Linux
export LANG=en_US.utf-8
export LC_ALL=en_US.utf-8

####################################################################
## KLARNA/ERLANG STUFF #############################################
####################################################################

export NAME="Uwe Dauernheim"
export MAIL="uwe@klarna.com"
export ORGANIZATION="Klarna AB"
export KRED_POLL=true
export ERL_INETRC=$HOME/.inetrc
export ORIG_PATH="$PATH"

function r12b5 {
    export PATH="$HOME/dev/OTP/install/R12B5/bin:${ORIG_PATH}"
    echo "Erlang: " `which erl`
}

function r13b04 {
    export PATH="$HOME/dev/OTP/install/R13B04/bin:${ORIG_PATH}"
    export DIALYZER_PLT="$HOME/dev/OTP/install/R13B04/dialyzer.plt"
    echo "Erlang: " `which erl`
}

function r14b01 {
    export PATH="$HOME/dev/OTP/install/R14B01/bin:${ORIG_PATH}"
    export DIALYZER_PLT="$HOME/dev/OTP/install/R14B01/dialyzer.plt"
    echo "Erlang: " `which erl`
}

function r14b02 {
    export PATH="$HOME/dev/OTP/install/R14B02/bin:${ORIG_PATH}"
    export DIALYZER_PLT="$HOME/dev/OTP/install/R14B02/dialyzer.plt"
    echo "Erlang: " `which erl`
}

function stderl {
    export PATH="${ORIG_PATH}"
    echo "Erlang: " `which erl`
}

####################################################################
####################################################################
####################################################################

r14b02

if [ -e $HOME/Dropbox/Klarna/klarna_animation.sh ] ; then
    if [ ! -x $HOME/Dropbox/Klarna/klarna_animation.sh ] ; then
        chmod +x $HOME/Dropbox/Klarna/klarna_animation.sh
    fi
    $HOME/Dropbox/Klarna/klarna_animation.sh 1
fi

[ $HOME = "$PWD" ] && cd $HOME/dev
