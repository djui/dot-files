;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GLOBAL CONFIGURATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; List of useful settings: http://www.emacswiki.org/emacs/EmacsCrashCode
(setq-default user-full-name               "Uwe Dauernheim"
              user-mail-address            "uwe@dauernheim.net"
              ;; Annoying   stuff
              inhibit-startup-echo-area-message t
              inhibit-startup-screen            t
              inhibit-startup-message           t
              initial-scratch-message           nil
              visible-bell                      nil
              ;; Show date and time
              ;; Not needed at the moment due to tmux
              display-time-day-and-date         nil
              display-time-24hr-format          t
              ;; Save session to reopen next time
              desktop-save-mode                 t
              ;; Compilation help
              byte-compile-warnings             nil
              compilation-scroll-output         t
              compilation-window-height         10
              ;; Combine killring and X clipboard
              x-select-enable-clipboard         t
              ; interprogram-paste-function  'x-cut-buffer-or-selection-value
              ;; Completion
              completion-ignore-case            t
              pcomplete-ignore-case             t
              ;; Selection mode - note: doesn't work in emacs -nw
              shift-select-mode                 t
              delete-selection-mode             t
              transient-mark-mode               t
              ;; Line numbering mode
              global-visual-line-mode           t
              line-number-mode                  t
              column-number-mode                t
              truncate-lines                    -1
              ;; Syntax-, region mark-, parentals-Highlighting
              global-font-lock-mode             t
              font-lock-maximum-decoration      t
              ;; Default tab width
              indent-tabs-mode                  nil
              tab-width                         4 ; to show old style correctly
              ;; Have a border above and below the cursor while scrolling
              scroll-margin                     5
              ;; Only scroll by 1 line a time
              scroll-up-aggressively            0.1
              scroll-down-aggressively          0.1
              scroll-conservatively             most-positive-fixnum
              scroll-preserve-screen-position   t
              ;; Keep old backups of changed files
              make-backup-files                 t
              backup-by-copying                 t
              version-control                   t
              delete-old-versions               t
              kept-new-versions                 10
              kept-old-versions                 10
              backup-directory-alist            '(("." . "~/.emacs.d/backups"))
              undo-limit                        100000
              ;; Version control
              vc-follow-symlinks                nil
              ;; Change frame title
              frame-title-format                (setq icon-title-format
                                                      (format "%%b - %semacs"
                                                              (if (featurep 'xemacs) "x" "")))

              ;; Use inferior shell that was not customized
              shell-file-name                   "/bin/sh"
              ;; Use Chromium as default browser for links instead of Firefox
              ; browse-url-browser-function  'browse-url-generic
              ; browse-url-generic-program   "chromium-browser"
              fill-column                       80
              hl-paren-colors                   '("orange1"
                                                  "yellow1"
                                                  "greenyellow"
                                                  "green1"
                                                  "springgreen1"
                                                  "cyan1"
                                                  "slateblue1"
                                                  "magenta1"
                                                  "purple"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; OSX specific

(if (equal system-type 'darwin)
    (progn
      ;; See https://github.com/Homebrew/homebrew/commit/49c85b89753d42cc4ec2fee9607a608b3b14ab33?w=1
      (setq ns-use-srgb-colorspace t)
      ;; Change modifier key
      (setq mac-command-modifier 'meta)
      ;; Trash
      (setq trash-directory (expand-file-name "~/.Trash"))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Configurations
;; These do not work with setq(-default)

(if window-system
    (progn
      (tool-bar-mode     -1) ; nil would only toggle
      (scroll-bar-mode   -1) ; nil would only toggle
      (mouse-wheel-mode  t)))
(menu-bar-mode           -1) ; nil would only toggle

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Global Mouse/Trackpad mode

(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] '(lambda () (interactive) (scroll-down 1)))
  (global-set-key [mouse-5] '(lambda () (interactive) (scroll-up 1)))
  (defun track-mouse (e))
  (setq mouse-sel-mode t)
  ;; Trackpad taming
  (setq mouse-wheel-scroll-amount '(0.0001))
  (setq mouse-wheel-progressive-speed nil)
  (setq scroll-step 1)
  ;;(setq scroll-conservatively 10000)
  ;;(setq auto-window-vscroll nil)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom aliases

(defalias 'yes-or-no-p 'y-or-n-p)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Encoding type

(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system       'utf-8)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Color Themes

(load-theme 'djui t)
;;(load-theme 'github t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Global keybindings

;; Not belowing to a specific mode.
;; See: http://wttools.sourceforge.net/emacs-stuff/emacs-keybindings.html

;; Don't kill but delete
;;(global-set-key (kbd "C-d")  'delete-word) ; See usage below
(global-set-key (kbd "M-DEL")  'backward-delete-word)

;;(global-set-key (kbd "M-<up>")   'move-line-up)
;;(global-set-key (kbd "M-<down>") 'move-line-down)

;; Swap Ctrl and Alt for more useability. Keep in sync with shell
(global-set-key (kbd "C-b")    'backward-word)
(global-set-key (kbd "M-b")    'backward-char)
(global-set-key (kbd "C-f")    'forward-word)
(global-set-key (kbd "M-f")    'forward-char)
(global-set-key (kbd "C-d")    'delete-word)
(global-set-key (kbd "M-d")    'delete-char)

(global-set-key (kbd "M-g")    'goto-line)
(global-set-key (kbd "M-p")    'backward-paragraph)
(global-set-key (kbd "M-n")    'forward-paragraph)

(global-set-key (kbd "C-a")    'back-to-indentation)

(global-set-key (kbd "C-c d")  'forward-duplicate-line)
;;(global-set-key (kbd "C-c D")  'backward-duplicate-line)
(global-set-key (kbd "C-c D")  'dash-at-point)
(global-set-key (kbd "C-c e")  'eval-buffer)
(global-set-key (kbd "C-c j")  'join-next-line)
(global-set-key (kbd "C-c J")  'join-previous-line)
(global-set-key (kbd "C-c r")  'replace-regexp)
(global-set-key (kbd "C-c /")  'comment-or-uncomment-region)
(global-set-key (kbd "C-c c")  'un-camelcase-word-at-point)
(global-set-key (kbd "C-c g")  'magit-status)
(global-set-key (kbd "C-M-\\") 'indent-region-or-buffer)




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun delete-word (arg)
    "Delete characters forward until encountering the end of a word.
With argument, do this that many times."
    (interactive "p")
    (delete-region (point) (progn (forward-word arg) (point))))

(defun backward-delete-word (arg)
    "Delete characters backward until encountering the end of a word.
With argument, do this that many times."
    (interactive "p")
    (delete-word (- arg)))

(defun forward-duplicate-line ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (open-line 1)
      (next-line 1)
      (yank))
    (next-line 1)
    (move-to-column col)))

(defun backward-duplicate-line ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (previous-line 1)
      (open-line 1)
      (next-line 1)
      (yank))
    (previous-line 1)
    (move-to-column col)))

(defun join-next-line ()
  (interactive)
  (let ((col (current-column)))
    (next-line 1)
    (if mark-active ;; Not really working
        (let ((fill-column 999999))
          (fill-paragraph nil))
      (join-line))
    (move-to-column col)))

(defun join-previous-line ()
  (interactive)
  (if mark-active ;; Not really working
      (let ((fill-column 999999))
        (fill-paragraph nil))
    (join-line)))

(defun un-camelcase-word-at-point ()
  "un-camelcase the word at point, replacing uppercase chars with
the lowercase version preceded by an underscore.

The first char, if capitalized (eg, PascalCase) is just
downcased, no preceding underscore.
"
  (interactive)
  (save-excursion
    (let ((bounds (bounds-of-thing-at-point 'word)))
      (replace-regexp "\\([A-Z]\\)" "_\\1" nil
                      (1+ (car bounds)) (cdr bounds))
      (downcase-region (car bounds) (cdr bounds)))))

(defun indent-buffer ()
  "Indent the currently visited buffer."
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max)))

(defun indent-region-or-buffer ()
  "Indent a region if selected, otherwise the whole buffer."
  (interactive)
  (save-excursion
    (if (region-active-p)
        (progn
          (indent-region (region-beginning) (region-end))
          (message "Indented selected region."))
      (progn
        (indent-buffer)
        (message "Indented buffer.")))))

(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))

(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
    (indent-according-to-mode))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PACKAGE MANAGER
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Package manager

(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Use-package

(eval-when-compile
  (require 'use-package))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MODES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package html-mode
  :mode ("\\.html$" . nxml-mode)
  :init (add-to-list 'magic-mode-alist '("<html>" . html-mode)))

(use-package nxml-mode
  :mode
  ("\\.gpx$"   . nxml-mode)
  ("\\.plist$" . nxml-mode)
  ("\\.rng$"   . nxml-mode)
  ("\\.rss$"   . nxml-mode)
  ("\\.sch$"   . nxml-mode)
  ("\\.svg$"   . nxml-mode)
  ("\\.tcx$"   . nxml-mode)
  ("\\.xml$"   . nxml-mode)
  ("\\.xsd$"   . nxml-mode)
  ("\\.xslt$"  . nxml-mode)

  :init
  (add-to-list 'magic-mode-alist '("<!DOCTYPE html .+DTD XHTML .+>" . nxml-mode))
  (add-to-list 'magic-mode-alist '("<\\?xml " . nxml-mode))
  (setq nxml-slash-auto-complete-flag t))

(use-package yaml-mode
  :mode
  ("\\.yaml$" . yaml-mode)
  ("\\.yml$"  . yaml-mode))

(use-package cc-mode
  :config (setq c-basic-offset 2))

(use-package js2-mode
  :mode "\\.js$"
  ("\\.js$"   . js-mode)
  ("\\.conf$" . js-mode)
  :init
  (setq-default js2-basic-offset 2)
  (setq-default js2-bounce-indent-p nil)
  :config
  (js2-imenu-extras-mode)
  (use-package js2-refactor)
  (use-package skewer-mode
    :commands skewer-mode))

(use-package json-mode
  :mode "\\.json$"
  :config
  (defun my-json-mode-hook ()
    (interactive)
    (setq js-indent-level 2)
    (rainbow-delimiters-mode))
  (add-hook 'json-mode-hook 'my-json-mode-hook))


(use-package rust-mode
  :config
  (setq rust-indent-unit 2)
  ;;(use-package cargo)
  (use-package rustfmt))

(use-package sh-mode
  :interpreter ("bash" . sh-mode)
  :interpreter ("csh"  . sh-mode)
  :interpreter ("dash" . sh-mode)
  :interpreter ("sh"   . sh-mode)
  :interpreter ("zsh"  . sh-mode))

(use-package adoc-mode
  :mode ("\\.asciidoc$" . adoc-mode))

(use-package lisp-mode
  :mode (("\\.cl$" . lisp-mode))
  :config
  (defun my-elisp-mode-hook ()
    (paredit-mode t)
    (autopair-mode t)
    (show-paren-mode t)
    (rainbow-delimiters-mode t)
    (highlight-parentheses-mode t))
  (add-hook 'emacs-lisp-mode-hook 'my-elisp-mode-hook))

(use-package clojure-mode
  :mode
  ("\\.clj$" . clojure-mode)
  ("\\.cljs$" . clojure-mode)
  ("\\.cljx$" . clojure-mode)
  :config
  (setq completion-at-point-functions '(auto-complete))
  (setq nrepl-hide-special-buffers t)
  (setq cider-repl-pop-to-buffer-on-connect nil)
  (setq cider-repl-popup-stacktraces nil)
  (setq cider-auto-select-error-buffer nil)
  (setq cider-popup-stacktraces t)
  (defun my-clojure-mode-hook ()
    (cider-mode t)
    (paredit-mode t)
    (autopair-mode t)
    (show-paren-mode t)
    (rainbow-delimiters-mode t)
    (highlight-parentheses-mode t))
  (add-hook 'clojure-mode-hook 'my-clojure-mode-hook)
  :bind
  ("M-<left>" . paredit-backward-slurp-sexp)
  ("M-<right>" . paredit-forward-slurp-sexp))

(use-package python
  :mode ("\\.py$" . python-mode)
  :interpreter ("python" . python-mode)
  :config (setq py-indent-offset 2))

(use-package ruby-mode
  :mode "\\.rb$|\\.pp$"
  :interpreter "ruby")

(use-package go-mode
  :config
  (use-package auto-complete-config)
  (use-package go-autocomplete)
  (use-package go-complete)
  (use-package go-dlv)
  (use-package go-eldoc)
  (use-package go-errcheck)
  (use-package go-stacktracer)
  (use-package golint)
  (use-package gotest)
  (use-package govet)
  (defun my-go-mode-hook ()
    (ac-config-default)
    (flycheck-mode t)
    (autopair-mode t)
    (highlight-parentheses-mode t)
    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save)
    (local-set-key (kbd "M-.") 'godef-jump)
    (local-set-key (kbd "M-,") 'pop-tag-mark))
  (add-hook 'go-mode-hook 'my-go-mode-hook))

(use-package dockerfile-mode
  :mode ("^Dockerfile" . dockerfile-mode))

(use-package linum
  :disabled t
  :init (global-linum-mode t)
  :config (setq linum-format "%3d "))

(use-package hl-line
  :init (global-hl-line-mode t))

(use-package hl-todo
  :init (global-hl-todo-mode t)
  :config (setq hl-todo-activate-in-modes '(go-mode clojure-mode)))

(use-package highlight-chars
  :config
  ;;(add-hook 'font-lock-mode-hook 'hc-highlight-tabs)
  (add-hook 'font-lock-mode-hook 'hc-highlight-trailing-whitespace))

(use-package markdown-mode
  :mode ("\\.md$" . markdown-mode))

(use-package nginx-mode)

(use-package protobuf-mode)

(use-package apples-mode)

(use-package crontab-mode
  :mode "\\.?cron\\(tab\\)?$")

(use-package git-commit)

(use-package gitconfig-mode
  :mode ("\\.gitconfig$" . gitconfig-mode))

(use-package gitignore-mode
  :mode ("\\.gitignore$" . gitignore-mode))

(use-package magit)

(use-package git-gutter+
  :init (global-git-gutter+-mode)
  :config
  (setq git-gutter+-modified-sign "±")
  (setq git-gutter+-window-width 2)
  (setq git-gutter+-disabled-modes '())
  (set-face-foreground 'git-gutter+-modified "yellow4")
  (set-face-foreground 'git-gutter+-added    "green4")
  (set-face-foreground 'git-gutter+-deleted  "red4")
  (define-key git-gutter+-mode-map (kbd "C-x n")   'git-gutter+-next-hunk)
  (define-key git-gutter+-mode-map (kbd "C-x p")   'git-gutter+-previous-hunk)
  (define-key git-gutter+-mode-map (kbd "C-x v =") 'git-gutter+-show-hunk)
  (define-key git-gutter+-mode-map (kbd "C-x R")   'git-gutter+-revert-hunks)
  (define-key git-gutter+-mode-map (kbd "C-x t")   'git-gutter+-stage-hunks)
  (define-key git-gutter+-mode-map (kbd "C-x c")   'git-gutter+-commit)
  (define-key git-gutter+-mode-map (kbd "C-x C")   'git-gutter+-stage-and-commit)
  (define-key git-gutter+-mode-map (kbd "C-x C-y") 'git-gutter+-stage-and-commit-whole-buffer)
  (define-key git-gutter+-mode-map (kbd "C-x U")   'git-gutter+-unstage-whole-buffer)
  :diminish (git-gutter+-mode . "gg"))

(use-package recentf
  :init (recentf-mode t)
  :config
  (setq recentf-auto-cleanup    300)
  (setq recentf-max-saved-items 1000)
  (setq recentf-max-menu-items  100)
  (setq recentf-keep '(file-remote-p file-readable-p))
  (add-to-list 'recentf-exclude "\\.ido\\.last"))

(use-package wedge-ws
  :bind
  ("C-c f" . wedge-ws-inc)
  ("C-c b" . wedge-ws-dec))

(use-package ido
  :init (ido-mode t)
  :bind
  ("M-x"     . ido-mx-completion)
  ("C-x C-k" . ido-kill-buffer)
  ("C-x f"   . recentf-ido-find-file)
  :config
  (setq ido-enable-flex-matching t)
  (setq ido-max-prospects        75)
  (defun ido-mx-completion ()
    (interactive)
    (call-interactively
     (intern
      (ido-completing-read "M-x " (all-completions "" obarray 'commandp)))))

  ;; It can restore recently used files easily.
  ;; Courtesty to Robin "Rost" for this snippet.
  (require 'cl)
  (defun recentf-ido-find-file ()
    "Find a recent file using Ido."
    (interactive)
    (let* ((file-assoc-list
            (mapcar (lambda (x) (cons (file-name-nondirectory x) x)) recentf-list))
           (filename-list
            (remove-duplicates (mapcar #'car file-assoc-list) :test #'string=))
           (filename
            (ido-completing-read "Choose recent file: " filename-list nil t)))
      (when filename
        (find-file (cdr (assoc filename file-assoc-list)))))))

(use-package ibuffer
  :load-path "~/.emacs.d/ibuffer-git"
  :bind ("C-x C-b" . ibuffer)
  :config
  (use-package ibuffer-config)
  (use-package ibuffer-git)
  (progn
     (setq ibuffer-show-empty-filter-groups nil
           ibuffer-always-show-last-buffer  t
           ibuffer-view-ibuffer             t
           ibuffer-default-sorting-mode     'major-mode
           ibuffer-expert                   t)

     (setq ibuffer-never-show-predicates
           (list "\\*Completions\\*"))

     (setq ibuffer-saved-filter-groups
           ' (("default"

               ("elisp"
                (or (filename . "elisp/")
                    (filename . "elisp/etc/initd")
                    (mode . emacs-lisp-mode)))

               ("emacs"
                (or (name . "^\\*scratch\\*$")
                    (name . "^\\*Messages\\*$")
                    (name . "^TAGS\\(<[0-9]+>\\)?$")
                    (name . "^\\*Help\\*$")
                    (name . "^\\*info\\*$")
                    (name . "^\\*Occur\\*$")
                    (name . "^\\*grep\\*$")
                    (name . "^\\*Compile-Log\\*$")
                    (name . "^\\*Backtrace\\*$")
                    (name . "^\\*Process List\\*$")
                    (name . "^\\*gud\\*$")
                    (name . "^\\*Man")
                    (name . "^\\*WoMan")
                    (name . "^\\*Kill Ring\\*$")
                    (name . "^\\*Completions\\*$")
                    (name . "^\\*tramp")
                    (name . "^\\*shell\\*$")
                    (name . "^\\*compilation\\*$")))

               ("org"
                (or (mode . org-mode)
                    (mode . muse-mode)))

               ("agenda"
                (or (name . "^\\*Calendar\\*$")
                    (name . "^diary$")
                    (name . "^\\*Agenda")
                    (name . "^\\*org-")
                    (name . "^\\*Org")))

               ("latex"
                (or (mode . latex-mode)
                    (mode . LaTeX-mode)
                    (mode . bibtex-mode)
                    (mode . reftex-mode)))

               ("shell"
                (or (mode . eshell-mode)
                    (mode . shell-mode)))

               ("erlang code"
                (or (mode . erlang-mode)
                    (mode . erlang-extended-mode)
                    (name . "\\.erl")
                    (name . "\\*erl")
                    (name . "\\.hrl")
                    (name . "\\.yaws")))

               ("erlang"
                (or (name . "\\*derl")
                    (name . "\\*Erl")
                    (name . "\\*wrangler")
                    (name . "\\*trace")
                    (name . "\\*plist")
                    (name . "\\*pid <")
                    (name . "^\\*Wrangler")
                    (name . "^\\*trace")
                    (name . "\\*edb")))

               ("lisp"
                (or (mode . lisp-mode)
                    (mode . repl)
                    (mode . slime-repl-mode)
                    (name . "^\\*slime")
                    (name . "^\\*inferior-lisp")))

               ("code"
                (or (mode . autoconf-mode)
                    (mode . c-mode)
                    (mode . gud-mode)
                    (mode . makefile-mode)
                    (mode . sh-mode)))

               ("version control"
                (or (mode . svn-status-mode)
                    (mode . svn-log-edit-mode)
                    (name . "^\\*svn-")
                    (name . "^\\*vc\\*$")
                    (name . "^\\*Annotate")
                    (name . "\\*[gG]it.*\\*")
                    (name . "^*magit")
                    (name . "^\\*git-")
                    (name . "^\\*vc-")))

               ("ediff"
                (or (mode . ediff-mode)
                    (name . "\\*ediff")
                    (name . "\\*Ediff")))

               ("wiki"
                (or (mode . mediawiki-mode)))

               ("dired"
                (or (mode . dired-mode)))

               ("rcirc"
                (or (mode . rcirc-mode)))

               ("gnus"
                (or (mode . message-mode)
                    (mode . bbdb-mode)
                    (mode . mail-mode)
                    (mode . gnus-group-mode)
                    (mode . gnus-summary-mode)
                    (mode . gnus-article-mode)
                    (name . "^\\.newsrc*")
                    (name . "^\\*nnimap")
                    (name . "^\\*imap")
                    (name . "^\\*gnus")
                    (name . "^\\*BBDB\\*$")
                    (name . "^\\.bbdb$")
                    (name . "^\\.newsrc-dribble")))))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (local-set-key (kbd "C-g") 'ibuffer-quit)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; switching to ibuffer puts the cursor on the most recent buffer
  (defadvice ibuffer (around ibuffer-point-to-most-recent activate) ()
             "Open ibuffer with cursor pointed to most recent buffer name"
             (let ((recent-buffer-name (buffer-name)))
               ad-do-it
               (ibuffer-jump-to-buffer recent-buffer-name)))

  ;; show git status in ibuffer
  (setq ibuffer-formats
        '((mark modified read-only
                git-status-mini " "
                (name 18 18 :left :elide) " "
                (size 9 -1 :right) " "
                (mode 16 16 :left :elide) " "
                ;; (eproject 16 16 :left :elide) " "
                (git-status 8 8 :left) " "
                filename-and-process)
          (mark " "
                (name 16 -1) " "
                filename))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CUSTOMIZATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("a3780105f37819a70a65c527f748f1c76293190c2aadd6014b01fcc8d5f555ee" "923faef2c7ed017e63f517703c846c6190c31400261e8abdb1be06d5b46ea19a" "dd4db38519d2ad7eb9e2f30bc03fba61a7af49a185edfd44e020aa5345e3dca7" "fb4bf07618eab33c89d72ddc238d3c30918a501cf7f086f2edf8f4edba9bd59f" default))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background nil)))))
