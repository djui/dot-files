;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GLOBAL CONFIGURATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Configurations
;; These do not work with setq(-default)
(if window-system
    (progn
      (tool-bar-mode     -1) ; nil would only toggle
      (scroll-bar-mode   -1) ; nil would only toggle
      (mouse-wheel-mode  t)))
(menu-bar-mode           -1) ; nil would only toggle

(global-hl-line-mode     t)
;(global-linum-mode      t)
;(global-whitespace-mode t)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DEFAULTS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; List of useful settings: http://www.emacswiki.org/emacs/EmacsCrashCode
(setq-default user-full-name               "Uwe Dauernheim"
              user-mail-address            "uwe@dauernheim.net"
              ;; Annoying stuff
              inhibit-startup-echo-area-message t
              inhibit-startup-screen       t
              inhibit-startup-message      t
              initial-scratch-message      nil
              visible-bell                 nil
              ;; Show date and time
              ;; Not needed at the moment due to tmux
              display-time-day-and-date    nil
              display-time-24hr-format     t
              ;; Save session to reopen next time
              desktop-save-mode            t
              ;; Compilation help
              byte-compile-warnings        nil
              compilation-scroll-output    t
              compilation-window-height    10
              ;; Combine killring and X clipboard
              ;; We don't want this if we don't really need X
              ; x-select-enable-clipboard    t
              ; interprogram-paste-function  'x-cut-buffer-or-selection-value
              ;; Completion
              completion-ignore-case       t
              pcomplete-ignore-case        t
              ;; Selection mode - note: doesn't work in emacs -nw
              shift-select-mode            t
              delete-selection-mode        t
              transient-mark-mode          t
              ;; Line numbering mode
              global-visual-line-mode      t
              line-number-mode             t
              column-number-mode           t
              linum-format                 "%3d "
              truncate-lines               -1
              ;; Syntax-, region mark-, parentals-Highlighting
              global-font-lock-mode        t
              font-lock-maximum-decoration t
              highlight-todo               t
              ;; Default tab width
              indent-tabs-mode             nil
              tab-width                    4 ; to show old style correctly
              c-basic-offset               2
              py-indent-offset             2
              js-indent-level              2
              rust-indent-unit             2
              ;; Have a border above and below the cursor while scrolling
              scroll-margin                5
              ;; Only scroll by 1 line a time
              scroll-up-aggressively       0.1
              scroll-down-aggressively     0.1
              scroll-conservatively        most-positive-fixnum
              scroll-preserve-screen-position t
              ;; Keep old backups of changed files
              make-backup-files            t
              backup-by-copying            t
              version-control              t
              delete-old-versions          t
              kept-new-versions            10
              kept-old-versions            10
              backup-directory-alist       '(("." . "~/.emacs.d/backups"))
              undo-limit                   100000
              ;; Version control
              vc-follow-symlinks           nil
              ;; Change frame title
              frame-title-format           (setq icon-title-format
                                                 (format "%%b - %semacs"
                                                         (if (featurep 'xemacs) "x" "")))
              ;; Mac specific options
              mac-command-modifier         'meta
              ;; Use Chromium as default browser for links instead of Firefox
              ; browse-url-browser-function  'browse-url-generic
              ; browse-url-generic-program   "chromium-browser"
              ;; Initial modes
              ; initial-major-mode        'erlang-mode
              ; default-major-mode        'erlang-mode
              fill-column                  80
              )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GLOBAL KEYBINDINGS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Global keybindings
;; Not belowing to a specific mode.
;; See: http://wttools.sourceforge.net/emacs-stuff/emacs-keybindings.html

;; Reenforce defaults? Something later on overwrites this...
(global-set-key (kbd "M-g")         'goto-line)

;; Overwrite/Inverse defaults
(global-set-key (kbd "C-x C-d")     'dired)
(global-set-key (kbd "C-a")         'back-to-indentation)
(global-set-key (kbd "M-m")         'move-beginning-of-line)
(global-set-key (kbd "C-f")         'forward-beginning-word)
(global-set-key (kbd "M-f")         'forward-char)
(global-set-key (kbd "C-b")         'backward-word)
(global-set-key (kbd "M-b")         'backward-char)
(global-set-key (kbd "C-d")         'kill-word)
(global-set-key (kbd "M-d")         'delete-char)
(global-set-key (kbd "C-k")         'forward-kill-line) ; doesn't fill the kill ring
(global-set-key (kbd "M-k")         'backward-kill-line)
(global-set-key (kbd "C-M-k")       'whole-kill-line)
(global-set-key (kbd "C-x k")       'kill-this-buffer)
(global-set-key (kbd "C-x o")       'next-multiframe-window)
(global-set-key (kbd "C-x O")       'previous-multiframe-window)

;; Customized: C-c
(global-set-key (kbd "C-c a")       'anything)
(global-set-key (kbd "C-c g")       'goto-line)
(global-set-key (kbd "C-c d")       'forward-duplicate-line)
(global-set-key (kbd "C-c D")       'backward-duplicate-line)
(global-set-key (kbd "C-c j")       'join-next-line)
(global-set-key (kbd "C-c J")       'join-previous-line)
(global-set-key (kbd "C-c o")       'occur)
;(global-set-key (kbd "C-c C-r")    'replace-string)
(global-set-key (kbd "C-c C-r")     'replace-regexp)
(global-set-key (kbd "C-c e")       'eval-buffer)
(global-set-key (kbd "C-c s")       'switch-to-scratch-buffer)
(global-set-key (kbd "C-c C-s")     'isearch-forward-at-point)
(global-set-key (kbd "C-c b")       'diff-buffer-with-file)
(global-set-key (kbd "C-c B")       'vc-diff)
(global-set-key (kbd "C-c c")       'comment-or-uncomment-region)
(global-set-key (kbd "C-c f")       'kfind)
(global-set-key (kbd "C-c DEL")     'compact-space)
(global-set-key (kbd "C-c C-f")     'erlang-indent-function)
(global-set-key (kbd "C-c C-M-f")   'erlang-indent-current-buffer)

;; General
(global-set-key (kbd "C-/")         'comment-or-uncomment-region) ; doesn't work in emacs -nw
(global-set-key (kbd "C-x v b")     'vc-annotate)
(global-set-key (kbd "C-h C-c")     'highlight-changes-mode)
;(global-set-key (kbd "M-d")        'kill-current-word) ;; A bit too strong
(global-set-key (kbd "C-w")         'smart-backwards-kill)

;; Resize windows keyboard shortcut
;; In `emacs -nw`, \e works, M- doesn't
;(global-set-key (kbd "\e <left>")  'shrink-window-horizontally)
;(global-set-key (kbd "\e <right>") 'enlarge-window-horizontally)
;(global-set-key (kbd "\e <up>")    'shrink-window)
;(global-set-key (kbd "\e <down>")  'enlarge-window)
(global-set-key (kbd "C-x =")       'balance-windows) ; usually on "C-x +"
;(global-set-key (kbd "\e\t")       'previous-source-buffer)
;(global-set-key (kbd "\e <left>")  'next-source-buffer)

;; Org-mode
;(global-set-key (kbd "C-c [")      'hide-subtree)
;(global-set-key (kbd "C-c {")      'hide-sublevels)
;(global-set-key (kbd "C-c ]")      'show-subtree)
;(global-set-key (kbd "C-c }")      'show-all)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MOUSE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; Active the mouse wheel: Add scrolling with mouse
(setq mac-emulate-three-button-mouse nil
      mouse-wheel-scroll-amount      1.5
      xterm-mouse-mode               t)
(global-set-key [mouse-4]    '(lambda () (interactive) (scroll-down 1)))
(global-set-key [mouse-5]    '(lambda () (interactive) (scroll-up   1)))
(global-set-key [wheel-up]   '(lambda () (interactive) (scroll-down 2)))
(global-set-key [wheel-down] '(lambda () (interactive) (scroll-up   2)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ENCODINGS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Encoding type
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system       'utf-8)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PACKAGE MANAGER
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Package manager
(require 'package)
(package-initialize)
(add-to-list 'package-archives '("elpa"      . "http://tromey.com/elpa/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
;(add-to-list 'package-archives '("gnu"       . "http://elpa.gnu.org/packages/"))

;; check if the packages are installed; if not, install it.
(mapc
 (lambda (package)
   (or (package-installed-p package)
       (if (y-or-n-p (format "Package %s is missing. Install it? " package))
           (package-install package))))
 '(ac-nrepl anything auto-complete auto-highlight-symbol auto-indent-mode autopair
            clojure-project-mode clojure-test-mode dash diff-git erlang expand-region
            github-theme gitty go-mode highlight-parentheses ibuffer-vc ido-ubiquitous
            iedit indent-guide lua-mode magit-simple-keys magithub magit markdown-mode
            move-text multiple-cursors nrepl clojure-mode paredit popup project-mode
            levenshtein rainbow-delimiters ruby-mode rust-mode cm-mode s scala-mode
            smart-tab smex yasnippet))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom functions
(defun forward-duplicate-line ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (open-line 1)
      (next-line 1)
      (yank))
    (next-line 1)
    (move-to-column col)))

(defun backward-duplicate-line ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (previous-line 1)
      (open-line 1)
      (next-line 1)
      (yank))
    (previous-line 1)
    (move-to-column col)))

(defun join-next-line ()
  (interactive)
  (let ((col (current-column)))
    (next-line 1)
    (if mark-active ;; Not really working
        (let ((fill-column 999999))
          (fill-paragraph nil))
      (join-line))
    (move-to-column col)))

(defun join-previous-line ()
  (interactive)
  (if mark-active ;; Not really working
      (let ((fill-column 999999))
        (fill-paragraph nil))
    (join-line)))

(defun next-source-buffer ()
  (interactive)
  (next-buffer)
  (if (string-match "^\*.*\*$" (buffer-name))
      (next-source-buffer)))

(defun previous-source-buffer ()
  (interactive)
  (previous-buffer)
  (if (string-match "^\*.*\*$" (buffer-name))
      (previous-source-buffer)))

(defun forward-kill-line ()
  (interactive)
  (if (looking-at "$")
      (delete-char 1)
    (delete-region (point) (line-end-position))))

(defun backward-kill-line ()
  (interactive)
  (if (looking-at "^")
      (delete-backward-char 1)
    (kill-line 0)))

(defun whole-kill-line ()
  (interactive)
  (save-excursion
    (kill-whole-line)))

(defun compact-space ()
  "Kill the whitespace between two non-whitespace characters"
  (interactive "*")
  (save-excursion
    (save-restriction
      (save-match-data
        (progn
          (re-search-backward "[^ \t\r\n]" nil t)
          (re-search-forward "[ \t\r\n]+" nil t)
          (replace-match " " nil nil))))))

(defun highlight-todo ()
  (font-lock-add-keywords nil '(("\\(@todo\\|@fixme\\|XXX\\|TODO\\|FIXME\\)" 1
                                 font-lock-warning-face prepend))))

;;; Original author: ttn at netcom dot com, 28-Jan-1996
;;; Modified for multiple lines: Eric
;;; http://curiousprogrammer.wordpress.com/2009/02/11/simple-emacs-shortcut/
(defun another-line (num-lines)
  "Copies line, preserving cursor column, and increments any numbers found.
  This should probably be generalized in the future.
  Argument NUM-LINES is the number of lines to modify."
  (interactive "p")
  (if (not num-lines) (setq num-lines 0) (setq num-lines (1- num-lines)))
  (let* ((col (current-column))
         (bol (save-excursion (forward-line (- num-lines)) (beginning-of-line) (point)))
         (eol (progn (end-of-line) (point)))
         (line (buffer-substring bol eol)))
    (goto-char bol)
    (while (re-search-forward "[0-9]+" eol 1)
      (let ((num (string-to-int (buffer-substring
                                 (match-beginning 0) (match-end 0)))))
        (replace-match (int-to-string (1+ num))))
      (setq eol (save-excursion (goto-char eol) (end-of-line) (point))))
    (goto-char bol)
    (insert line "\n")
    (move-to-column col)))

;; Original source: http://platypope.org/blog/2007/8/5/a-compendium-of-awesomeness
(defvar isearch-initial-string nil)
(defun isearch-set-initial-string ()
  (remove-hook 'isearch-mode-hook 'isearch-set-initial-string)
  (setq isearch-string isearch-initial-string)
  (isearch-search-and-update))

(defun isearch-forward-at-point (&optional regexp-p no-recursive-edit)
  "Interactive search forward for the symbol at point."
  (interactive "P\np")
  (if regexp-p (isearch-forward regexp-p no-recursive-edit)
    (let* ((end   (progn (skip-syntax-forward  "w_") (point)))
           (begin (progn (skip-syntax-backward "w_") (point))))
      (if (eq begin end)
          (isearch-forward regexp-p no-recursive-edit)
        (setq isearch-initial-string (buffer-substring begin end))
        (add-hook 'isearch-mode-hook 'isearch-set-initial-string)
        (isearch-forward regexp-p no-recursive-edit)))))

;; Align search results to center of buffer
(defvar isearch-old-scroll-margin-value nil)
(defun isearch-mode-margin-hook ()
  (if isearch-old-scroll-margin-value
      (progn
        (setq isearch-old-scroll-margin-value nil
              scroll-margin                   isearch-old-scroll-margin-value))
    (setq isearch-old-scroll-margin-value scroll-margin
          scroll-margin                   (/ (window-height) 2))))

(add-hook 'isearch-mode-hook     'isearch-mode-margin-hook)
(add-hook 'isearch-mode-end-hook 'isearch-mode-margin-hook)

;; Delete current word under cursor
(defun mark-current-word ()
  "Put point at beginning of current word, set mark at end."
  (interactive)
  (let* ((opoint (point))
         (word (current-word))
         (word-length (length word)))
    (if (save-excursion
          ;; Avoid signaling error when moving beyond buffer.
          (if (> (point-min)  (- (point) word-length))
              (beginning-of-buffer)
            (forward-char (- (length word))))
          (search-forward word (+ opoint (length word))
                          'noerror))
        (progn (push-mark (match-end 0) nil t)
               (goto-char (match-beginning 0)))
      (error "No word at point" word))))

(defun forward-beginning-word ()
  (interactive)
  (forward-word 2)
  (backward-word 1))

(defun kill-current-word ()
  (interactive)
  (save-excursion (kill-word 1) (backward-kill-word 1)))

;; Kill word or cut region
;; Courtesty to Robin "Rost" for this snippet.
(defun smart-backward-kill-word (arg)
  "Special version of backward-kill-word that swallows spaces
and newlines separate from words. This way a C-w at
beginning-of-line will not chew its way halfway through a word on
the line above.

Is this correct now? It now chews its way through words and
whitespace, anything else get chewed one character at a time."
  (interactive "p")
  (cond ((looking-back "\\s-+")
         (kill-region (point) (progn (re-search-backward "\\S-")
                                     (forward-char 1) (point))))
        ((looking-back "[^a-z0-9A-Z]") (backward-delete-char 1))
        (t (backward-kill-word arg))))

(defun smart-backwards-kill ()
  "`kill-region' if the mark is active, else `backward-kill-word'."
  (interactive)
  (if mark-active
      (call-interactively 'kill-region)
    (call-interactively 'smart-backward-kill-word)))

(defun switch-to-scratch-buffer ()
  (interactive)
  (switch-to-buffer "*scratch"))

;; Find in kred dirs
;(defun kfind (&optional word)
;  (interactive "r")
(defun kfind (word)
  (interactive "MFind: ")
  (kfind-at
   ;(concat (car (split-string (buffer-file-name) "lib")) "{lib,test}/")
   "$HOME/dev/project/{lib,test}/"
   word))

(defun kfind-at (path word)
  (grep-find
   (concat "find " path
           (concat " -type f \\( -name '*.erl' -o -name '*.hrl' \\) | xargs grep --color=auto " word))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ALIASES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom aliases
(defalias 'yes-or-no-p 'y-or-n-p)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MODES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; w3m Browser
; [Installation](http://emacs-w3m.namazu.org/)
; $ cvs -d :pserver:anonymous@cvs.namazu.org:/storage/cvsroot co emacs-w3m
; $ cd emacs-w3m && autoconf && ./configure && make install
(add-to-list 'load-path "~/.emacs.d/emacs-w3m")
(require 'w3m-load)
(setq browse-url-browser-function 'w3m-browse-url
      w3m-use-header-line         nil
      w3m-use-tab                 nil
      w3m-auto-show               t
      w3m-use-cookies             t
      w3m-coding-system           'utf-8
      w3m-file-coding-system      'utf-8
      w3m-file-name-coding-system 'utf-8
      w3m-input-coding-system     'utf-8
      w3m-output-coding-system    'utf-8
      w3m-terminal-coding-system  'utf-8)
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
(global-set-key "\C-xm" 'browse-url-at-point)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Recent mode
(recentf-mode t)
(setq recentf-auto-cleanup    300
      recentf-max-saved-items 1000
      recentf-max-menu-items  100)
(add-to-list 'recentf-exclude "\\.ido\\.last")

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Auto-indent mode
(auto-indent-global-mode)
;(add-hook 'emacs-lisp-mode-hook 'auto-indent-minor-mode)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Move text
(require 'move-text)
(global-set-key (kbd "M-p") 'move-text-up)
(global-set-key (kbd "M-n") 'move-text-down)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Allout mode
(require 'allout)
(allout-init t)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; iBuffer mode
(provide 'ibuffer-config)
(require 'ibuffer-config)

(global-set-key (kbd "C-x C-b") 'ibuffer)

(eval-after-load 'ibuffer
  '(progn
     (setq ibuffer-show-empty-filter-groups nil
           ibuffer-always-show-last-buffer  t
           ibuffer-view-ibuffer             t
           ibuffer-default-sorting-mode     'major-mode
           ibuffer-expert                   t)

     (setq ibuffer-never-show-predicates
           (list "\\*Completions\\*"))

     (setq ibuffer-saved-filter-groups
           ' (("default"

               ("elisp"
                (or (filename . "elisp/")
                    (filename . "elisp/etc/initd")
                    (mode . emacs-lisp-mode)))

               ("emacs"
                (or (name . "^\\*scratch\\*$")
                    (name . "^\\*Messages\\*$")
                    (name . "^TAGS\\(<[0-9]+>\\)?$")
                    (name . "^\\*Help\\*$")
                    (name . "^\\*info\\*$")
                    (name . "^\\*Occur\\*$")
                    (name . "^\\*grep\\*$")
                    (name . "^\\*Compile-Log\\*$")
                    (name . "^\\*Backtrace\\*$")
                    (name . "^\\*Process List\\*$")
                    (name . "^\\*gud\\*$")
                    (name . "^\\*Man")
                    (name . "^\\*WoMan")
                    (name . "^\\*Kill Ring\\*$")
                    (name . "^\\*Completions\\*$")
                    (name . "^\\*tramp")
                    (name . "^\\*shell\\*$")
                    (name . "^\\*compilation\\*$")))

               ("org"
                (or (mode . org-mode)
                    (mode . muse-mode)))

               ("agenda"
                (or (name . "^\\*Calendar\\*$")
                    (name . "^diary$")
                    (name . "^\\*Agenda")
                    (name . "^\\*org-")
                    (name . "^\\*Org")))

               ("latex"
                (or (mode . latex-mode)
                    (mode . LaTeX-mode)
                    (mode . bibtex-mode)
                    (mode . reftex-mode)))

               ("shell"
                (or (mode . eshell-mode)
                    (mode . shell-mode)))

               ("erlang code"
                (or (mode . erlang-mode)
                    (mode . erlang-extended-mode)
                    (name . "\\.erl")
                    (name . "\\*erl")
                    (name . "\\.hrl")
                    (name . "\\.yaws")))

               ("erlang"
                (or (name . "\\*derl")
                    (name . "\\*Erl")
                    (name . "\\*wrangler")
                    (name . "\\*trace")
                    (name . "\\*plist")
                    (name . "\\*pid <")
                    (name . "^\\*Wrangler")
                    (name . "^\\*trace")
                    (name . "\\*edb")))

               ("lisp"
                (or (mode . lisp-mode)
                    (mode . repl)
                    (mode . slime-repl-mode)
                    (name . "^\\*slime")
                    (name . "^\\*inferior-lisp")))

               ("code"
                (or (mode . autoconf-mode)
                    (mode . c-mode)
                    (mode . gud-mode)
                    (mode . makefile-mode)
                    (mode . sh-mode)))

               ("version control"
                (or (mode . svn-status-mode)
                    (mode . svn-log-edit-mode)
                    (name . "^\\*svn-")
                    (name . "^\\*vc\\*$")
                    (name . "^\\*Annotate")
                    (name . "\\*[gG]it.*\\*")
                    (name . "^*magit")
                    (name . "^\\*git-")
                    (name . "^\\*vc-")))

               ("ediff"
                (or (mode . ediff-mode)
                    (name . "\\*ediff")
                    (name . "\\*Ediff")))

               ("wiki"
                (or (mode . mediawiki-mode)))

               ("dired"
                (or (mode . dired-mode)))

               ("rcirc"
                (or (mode . rcirc-mode)))

               ("gnus"
                (or (mode . message-mode)
                    (mode . bbdb-mode)
                    (mode . mail-mode)
                    (mode . gnus-group-mode)
                    (mode . gnus-summary-mode)
                    (mode . gnus-article-mode)
                    (name . "^\\.newsrc*")
                    (name . "^\\*nnimap")
                    (name . "^\\*imap")
                    (name . "^\\*gnus")
                    (name . "^\\*BBDB\\*$")
                    (name . "^\\.bbdb$")
                    (name . "^\\.newsrc-dribble"))))))))

(eval-after-load 'ibuffer
  '(progn
     (add-hook 'ibuffer-mode-hook
               (lambda ()
                 (local-set-key (kbd "C-g") 'ibuffer-quit)
                 (ibuffer-switch-to-saved-filter-groups "default")))))

(eval-after-load 'ibuffer
  '(progn
     ;; switching to ibuffer puts the cursor on the most recent buffer
     (defadvice ibuffer (around ibuffer-point-to-most-recent activate) ()
       "Open ibuffer with cursor pointed to most recent buffer name"
       (let ((recent-buffer-name (buffer-name)))
         ad-do-it
         (ibuffer-jump-to-buffer recent-buffer-name)))))

(eval-after-load 'ibuffer
  '(progn
     ;; show git status in ibuffer
     (add-to-list 'load-path "~/.emacs.d/ibuffer-git")
     (when (require 'ibuffer-git)
       (setq ibuffer-formats
             '((mark modified read-only
                     git-status-mini " "
                     (name 18 18 :left :elide) " "
                     (size 9 -1 :right) " "
                     (mode 16 16 :left :elide) " "
                     ;; (eproject 16 16 :left :elide) " "
                     (git-status 8 8 :left) " "
                     filename-and-process)
               (mark " "
                     (name 16 -1) " "
                     filename))))))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Dired mode
(add-hook 'dired-mode-hook 'my-dired-mode-hook)
(add-hook 'dired-mode-hook 'my-dired-mode-hook)

(defun my-dired-mode-hook ()
  (local-set-key (kbd "F") 'dired-find-file-other-window))

(defun my-dired-mode-hook ()
  (local-set-key (kbd "<mouse-2>") 'dired-mouse-find-file))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IDo mode, better than iswitch mode
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t
      ido-max-prospects        75)
(global-set-key (kbd "M-x")     'ido-mx-completion)
(global-set-key (kbd "C-x C-k") 'ido-kill-buffer)
(global-set-key (kbd "C-x f")   'recentf-ido-find-file)

(defun ido-mx-completion ()
  (interactive)
  (call-interactively
   (intern
    (ido-completing-read "M-x " (all-completions "" obarray 'commandp)))))

;; It can restore recently used files easily.
;; Courtesty to Robin "Rost" for this snippet.
(defun recentf-ido-find-file ()
  "Find a recent file using Ido."
  (interactive)
  (let* ((file-assoc-list
          (mapcar (lambda (x) (cons (file-name-nondirectory x) x)) recentf-list))
         (filename-list
          (remove-duplicates (mapcar #'car file-assoc-list) :test #'string=))
         (filename
          (ido-completing-read "Choose recent file: " filename-list nil t)))
    (when filename
      (find-file (cdr (assoc filename file-assoc-list))))))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Whitespace mode
(require 'whitespace)
(setq whitespace-style       (quote (face tabs tab-mark lines-tail)))
(setq whitespace-action      nil)
(setq whitespace-line-column 80)
(setq whitespace-display-mappings
      '((tab-mark     ?\t   [?\xBB ?\t] [?\\ ?\t]) ; tab
        ))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Magit
;; Will only work if you did "make && sudo make install" on it
;; Deactivated at the moment. It brings error during commit message edits
;; and I don't see its use case yet.
;; (require 'magit)
;; (add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . magit-commit-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Auto-complete mode
(require 'auto-complete-config)
(global-auto-complete-mode t)
; Fast popup, but slow auto-completion
(setq ac-delay 1.0)
(setq ac-auto-show-menu 0.1)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Yet Another Snippet plugin
;; See http://yasnippet.googlecode.com/svn/trunk/doc/snippet-development.html
;(require 'yasnippet)
;(yas/initialize)
;(yas/load-directory "~/.emacs.d/yasnippets")

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Indent-guide mode
(require 'indent-guide)
(indent-guide-set-delay 0.3)
;(setq indent-guide-char "│")
(setq indent-guide-char "┊")

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Auto-highlight-symbol mode
(require 'auto-highlight-symbol)
(auto-highlight-symbol-mode)
(global-auto-highlight-symbol-mode t)
(setq ahs-default-range 'ahs-range-whole-buffer
      ahs-idle-interval 1.0)
(global-set-key (kbd "C-c p") 'ahs-backward)
(global-set-key (kbd "C-c n") 'ahs-forward)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Multiple-cursors mode
(require 'multiple-cursors)
(global-set-key (kbd "C-c m")   'mc/mark-all-like-this-dwim)
(global-set-key (kbd "C-c M")   'mc/edit-lines)
(global-set-key (kbd "C-c C-n") 'mc/mark-next-like-this)
(global-set-key (kbd "C-c >")   'mc/mark-next-like-this)
(global-set-key (kbd "C-c C-p") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c <")   'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-a") 'mc/mark-all-like-this)
;(global-set-key (kbd "C-c r")  'mc/mark-all-in-region)
(global-set-key (kbd "C-c r")   'set-rectangular-region-anchor)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RCIRC - Emacs IRC
(add-to-list 'load-path "~/.emacs.d/rcirc")
(require 'rcirc)
(eval-after-load 'rcirc '(require 'rcirc-notify))
;; (rcirc-track-minor-mode 1)
(add-hook 'rcirc-mode-hook (lambda ()
                             (rcirc-track-minor-mode 1)
                             (rcirc-omit-mode)))

(setq rcirc-default-nick           "uwe"
      rcirc-default-user-name      "uwe"
      rcirc-default-full-name      "Uwe Dauernheim"
      rcirc-decode-coding-system   'undecided
      rcirc-time-format            "%H:%M:%S "
      rcirc-startup-channels-alist '(("#tech" "#core" "#staging"))
      rcirc-prompt                 "         %n> "
      rcirc-fill-prefix            "         "
      rcirc-fill-column            65
      rcirc-log-flag               t
      rcirc-buffer-maximum-lines   10000
      rcirc-bright-nicks           (quote ("jakob" "fabian" "bjorn" "dklee" "masse"))
      rcirc-keywords               (quote ("erlang"))
      rcirc-server-alist           '(("irc.hq.kred" :channels ("#tech" "#core" "#staging")))
      rcirc-ignore-list            '()
      rcirc-omit-responses         '("JOIN" "PART" "QUIT" "NICK" "AWAY" "MODE"))

;; Wrap long lines according to the width of the window
(add-hook 'window-configuration-change-hook '(lambda ()
                                               (setq rcirc-fill-column (- (window-width) 2))))

(defun rcirc-kill-all-buffers ()
  (interactive)
  (kill-all-mode-buffers 'rcirc-mode))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LANGUAGE MODES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Text mode
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-to-list 'auto-mode-alist '("README" . text-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ELisp mode
(add-hook 'emacs-lisp-mode-hook 'emacs-lisp-hook)

(defun emacs-lisp-hook ()
  (highlight-parentheses))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; HTML mode
(add-to-list 'auto-mode-alist '("\\.html$" . html-helper-mode))
(add-to-list 'auto-mode-alist '("\\.htm$"  . html-helper-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Projectile mode
; For help use: C-c p C-h
(projectile-global-mode)
;(add-hook 'clojure-mode-hook 'projectile-on)
(setq projectile-show-paths-function 'projectile-hashify-with-uniquify)
;(setq projectile-use-native-indexing t)
;(setq projectile-enable-caching t)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Clojure mode
;(package-install clojure-mode)
;(package-install clojure-test-mode)
;(package-install clojure-project-mode)
(add-hook 'clojure-mode-hook 'clojure-hook)

(defun clojure-hook ()
  (highlight-parentheses))

(require 'clojure-project-mode)
;(global-set-key (kbd "???") 'project-new)
;(global-set-key (kbd "???") 'project-save)
;(global-set-key (kbd "???") 'project-open)
;(global-set-key (kbd "???") 'project-fuzzy-search)
;(global-set-key (kbd "???") 'project-regex-search)
;(global-set-key (kbd "???") 'project-search-text)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nREPL mode
;(package-install auto-complete)
;(package-install nrepl)
;(package-install ac-nrepl)

;; Use as:
;;
;;   M-x nrepl-jack-in
;;
;;   C-c C-d Show documentation
;;   C-c C-s Show implementation
;;   C-c C-t Jump to source or test file
;;   M-. C-s Jump to definition
;;   M-, Jump back
;;   M-TAB auto-complete
;;
;; If documentation can't be found, add to ~/.lein/profiles.clj:
;;
;;   {:user {:injections [(use 'clojure.repl)]}}
;;
;; or type in nREPL:
;;
;;   (use 'clojure.repl)

(require 'ac-nrepl)
(add-hook 'nrepl-mode-hook             'ac-nrepl-setup)
(add-hook 'nrepl-interaction-mode-hook 'ac-nrepl-setup)
(eval-after-load "auto-complete"
  '(add-to-list 'ac-modes 'nrepl-mode))

(add-hook 'auto-complete-mode-hook     'nrepl-hook)
(add-hook 'nrepl-mode-hook             'nrepl-hook)
(add-hook 'nrepl-interaction-mode-hook 'nrepl-hook)

(define-key nrepl-interaction-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc)

(defun nrepl-hook ()
  (nrepl-turn-on-eldoc-mode)
  (setq completion-at-point-functions '(auto-complete)
        nrepl-hide-special-buffers t
        nrepl-popup-stacktraces-in-repl t
        nrepl-popup-stacktraces nil))


(defun highlight-parentheses ()
  (autoload 'paredit-mode "paredit" t)
  (paredit-mode)
  (show-paren-mode)
  (rainbow-delimiters-mode)
  (highlight-parentheses-mode))

(global-set-key (kbd "\e <left>")  'paredit-backward-slurp-sexp)
(global-set-key (kbd "\e <right>") 'paredit-forward-slurp-sexp)

(setq hl-paren-colors
      '("orange1"    "yellow1"      "greenyellow"
        "green1"     "springgreen1" "cyan1"
        "slateblue1" "magenta1"     "purple"))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Erlang mode
;(add-to-list 'load-path "~/dev/otp/install/R14B03/lib/erlang/lib/tools-2.6.6.4/emacs")
;(add-to-list 'exec-path "~/dev/otp/install/R14B03/bin")
;(setq erlang-root-dir   "~/dev/otp/install/R14B03")
(add-to-list 'load-path "/usr/local/lib/erlang/lib/tools-2.6.10/emacs")
(add-to-list 'exec-path "/usr/local/bin")
(setq erlang-root-dir   "/usr/local/lib/erlang")

(require 'erlang-start)
(setq erlang-tab-mode          nil
      erlang-indent-level      '2
      erlang-electric-commands '(erlang-electric-semicolon
                                 erlang-electric-comma
                                 erlang-electric-arrow
                                 erlang-electric-newline
                               ; erlang-electric-gt        ; ...annoying
                                 erlang-electric-lt))
(add-to-list 'auto-mode-alist        '("\\.[eh]rl$" . erlang-mode))
(add-to-list 'auto-mode-alist        '("\\.yaws$"   . erlang-mode))
(add-to-list 'interpreter-mode-alist '("escript"    . erlang-mode))

(add-hook 'erlang-mode-hook 'my-erlang-mode-hook)

(defun my-erlang-mode-hook ()
  (interactive)
  (linum-mode)
  (setq truncate-lines                 t
        truncate-partial-width-windows nil
        whitespace-style               '(face tabs lines-tail)
        whitespace-action              nil
        whitespace-line-column         80)
  (whitespace-mode)
  (highlight-todo)
  (highlight-parentheses-mode)
  (allout-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Go mode
(require 'go-mode-load)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Markdown mode
(add-to-list 'auto-mode-alist '("\\.md$"       . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
(add-hook 'markdown-mode-hook '(lambda() (local-set-key (kbd "<backtab>") 'markdown-cycle)))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ruby mode
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))
(autoload 'run-ruby "inf-ruby" "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby" "Set local key defs for inf-ruby in ruby-mode")
(add-hook 'ruby-mode-hook '(lambda () (inf-ruby-keys) (turn-on-font-lock)))
(autoload 'rubydb "rubydb3x" "Ruby debugger" t)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; THEMES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Color Themes
;(setq solarized-termcolors 256)
;(load-theme 'solarized-light t)
;(load-theme 'solarized-dark t)
;(load-theme 'less t)
;(load-theme 'zenburn t)
;(load-theme 'twilight t)
;(load-theme 'drr t)
;(load-theme 'almost-monokai t)
;(load-theme 'empty-void t)
;(load-theme 'wombat t)
;(load-theme 'monokai t)
;(add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/github-theme-0.0.3")
;(load-theme 'github t)
(set-face-background 'default nil)
(load-theme 'djui t)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CUSTOMIZATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom set variables
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(allout-auto-activation "t")
 '(column-number-mode t)
 '(custom-safe-themes (quote ("82cd267bd7a97d505f4c39869a8a952a217f077167ff096d935df1f4975b6182" default)))
 '(fringe-mode 0 nil (fringe))
 '(safe-local-variable-values (quote ((allout-layout . t) allout-layout t)))
 '(tooltip-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(font-lock-type-face ((t (:foreground "#FFFFFF" :weight normal)))))
 (if window-system
    (custom-set-faces
     '(default ((t (:inherit nil :stipple nil :background "#272821" :foreground "#F8F8F2" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 140 :width normal :foundry "unknown" :family "Terminus"))))
     '(mode-line ((t (:box nil))))
     '(mode-line-inactive ((t (:box nil))))
     '(whitespace-line ((t (:background "gray20" :foreground "#D62E00"))))))
