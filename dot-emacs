;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Configurations
;; These do not work with setq(-default)
(if window-system
    (progn
      (tool-bar-mode    -1) ; nil would only toggle
      (scroll-bar-mode  -1) ; nil would only toggle
      (mouse-wheel-mode t)))
(menu-bar-mode          -1) ; nil would only toggle

(global-hl-line-mode    t)
;(global-linum-mode      t)
;(global-whitespace-mode t)

;; List of useful settings: http://www.emacswiki.org/emacs/EmacsCrashCode
(setq-default user-full-name               "Uwe Dauernheim"
              user-mail-address            "uwe@klarna.com"
              ;; Annoying stuff
              inhibit-startup-echo-area-message t
              inhibit-startup-screen       t
              inhibit-startup-message      t
              initial-scratch-message      nil
              visible-bell                 nil
              ;; Show date and time
              ;; Not needed at the moment due to tmux
              display-time-day-and-date    nil
              display-time-24hr-format     t
              ;; Save session to reopen next time
              desktop-save-mode            t
              ;; Compilation help
              byte-compile-warnings        nil
              compilation-scroll-output    t
              compilation-window-height    10
              ;; Combine killring and X clipboard
              ;; We don't want this if we don't really need X
              ; x-select-enable-clipboard    t
              ; interprogram-paste-function  'x-cut-buffer-or-selection-value
              ;; Completion
              completion-ignore-case       t
              pcomplete-ignore-case        t
              ;; Selection mode - note: doesn't work in emacs -nw
              shift-select-mode            t
              delete-selection-mode        t
              transient-mark-mode          t
              ;; Line numbering mode
              global-visual-line-mode      t
              line-number-mode             t
              column-number-mode           t
              linum-format                 "%3d "
              truncate-lines               -1
              ;; Syntax-, region mark-, parentals-Highlighting
              global-font-lock-mode        t
              font-lock-maximum-decoration t
              show-paren-mode              t
              highlight-parentheses-mode   t
              highlight-todo               t
              ;; Default tab width
              indent-tabs-mode             nil
              tab-width                    4 ; to show old style correctly
              c-basisc-indent              2
              c-basic-offset               2
              py-indent-offset             2
              js-indent-level              2
              ;; Have a border above and below the cursor while scrolling
              scroll-margin                5
              ;; Only scroll by 1 line a time
              scroll-up-aggressively       0.1
              scroll-down-aggressively     0.1
              scroll-conservatively        most-positive-fixnum
              scroll-preserve-screen-position t
              ;; Keep old backups of changed files
              make-backup-files            t
              backup-by-copying            t
              version-control              t
              delete-old-versions          t
              kept-new-versions            10
              kept-old-versions            10
              backup-directory-alist       '(("." . "~/.emacs.d/backups"))
              undo-limit                   100000
              ;; Scrolling and mouse
              xterm-mouse-mode             t
              ;; Version control
              vc-follow-symlinks           nil
              ;; Change frame title
              frame-title-format           (setq icon-title-format
                                                 (format "%%b - %semacs"
                                                         (if (featurep 'xemacs) "x" "")))
              ;; Mac specific options
              mac-command-modifier         'meta
              ;; Use Chromium as default browser for links instead of Firefox
              ; browse-url-browser-function  'browse-url-generic
              ; browse-url-generic-program   "chromium-browser"
              ;; Initial modes
              ; initial-major-mode        'erlang-mode
              ; default-major-mode        'erlang-mode
              fill-column                  80
              )

;; Active the mouse wheel: Add scrolling with mouse
(setq mac-emulate-three-button-mouse nil)
(setq mouse-wheel-scroll-amount '(1.5))
(global-set-key [mouse-4]    '(lambda () (interactive) (scroll-down 1)))
(global-set-key [mouse-5]    '(lambda () (interactive) (scroll-up   1)))
(global-set-key [wheel-up]   '(lambda () (interactive) (scroll-down 2)))
(global-set-key [wheel-down] '(lambda () (interactive) (scroll-up   2)))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Global keybindings
;; See: http://wttools.sourceforge.net/emacs-stuff/emacs-keybindings.html
;; replacing default buffer

;; Reenforce defaults (???)
(global-set-key (kbd "M-g")         'goto-line)

;; Overwrite defaults
(global-set-key (kbd "C-x C-d")     'dired)
(global-set-key (kbd "C-a")         'back-to-indentation)
(global-set-key (kbd "M-m")         'move-beginning-of-line)
(global-set-key (kbd "C-f")         'forward-beginning-word)
(global-set-key (kbd "M-f")         'forward-char)
(global-set-key (kbd "C-b")         'backward-word)
(global-set-key (kbd "M-b")         'backward-char)
(global-set-key (kbd "C-d")         'kill-word)
(global-set-key (kbd "M-d")         'delete-char)
(global-set-key (kbd "C-k")         'forward-kill-line) ; doesn't fill the kill ring
(global-set-key (kbd "M-k")         'backward-kill-line)
(global-set-key (kbd "C-M-k")       'whole-kill-line)
(global-set-key (kbd "C-x k")       'kill-this-buffer)
(global-set-key (kbd "C-x o")       'next-multiframe-window)
(global-set-key (kbd "C-x O")       'previous-multiframe-window)

;; Ido
(global-set-key (kbd "C-x C-k")     'ido-kill-buffer)
(global-set-key (kbd "C-x f")       'recentf-ido-find-file)

;; Customized: C-c
;(global-set-key (kbd "C-c g")       'goto-line)
(global-set-key (kbd "C-c t")       'forward-transpose-lines)
(global-set-key (kbd "C-c T")       'backward-transpose-lines)
(global-set-key (kbd "C-c d")       'forward-duplicate-line)
(global-set-key (kbd "C-c D")       'backward-duplicate-line)
(global-set-key (kbd "C-c j")       'join-next-line)
(global-set-key (kbd "C-c J")       'join-previous-line)
(global-set-key (kbd "C-c o")       'occur)
(global-set-key (kbd "C-c r")       'replace-string)
(global-set-key (kbd "C-c R")       'replace-regexp)
(global-set-key (kbd "C-c e")       'eval-buffer)
(global-set-key (kbd "C-c s")       '(lambda () (interactive) (switch-to-buffer "*scratch*")))
(global-set-key (kbd "C-c b")       'diff-buffer-with-file)
(global-set-key (kbd "C-c B")       'vc-diff)
(global-set-key (kbd "C-c c")       'comment-or-uncomment-region)
(global-set-key (kbd "C-c f")       'kfind)

;; Code
(global-set-key (kbd "C-c C-f")     'erlang-indent-function)
(global-set-key (kbd "C-c C-M-f")   'erlang-indent-current-buffer)
(global-set-key (kbd "C-/")         'comment-or-uncomment-region) ; doesn't work in emacs -nw
(global-set-key (kbd "C-x v b")     'vc-annotate)

;; iBuffer
(global-set-key (kbd "C-x C-b")     'ibuffer)


;; General
(global-set-key (kbd "C-h C-c")     'highlight-changes-mode)
(global-set-key (kbd "M-s")         'isearch-forward-at-point)
;(global-set-key (kbd "M-d")         'kill-current-word) ;; A bit too strong
(global-set-key (kbd "C-w")         'smart-backwards-kill)

;; Resize windows keyboard shortcuts
;(global-set-key (kbd "M-<left>")   'shrink-window-horizontally) ; doesn't work in emacs -nw
;(global-set-key (kbd "M-<right>")  'enlarge-window-horizontally) ; doesn't work in emacs -nw
(global-set-key (kbd "\e <up>")     'shrink-window) ; \e because only works like that in emacs -nw
(global-set-key (kbd "\e <down>")   'enlarge-window) ; \e because only works like that in emacs -nw
(global-set-key (kbd "C-x =")       'balance-windows) ; usually on "C-x +"
;(global-set-key (kbd "\e\t")       'previous-source-buffer)
;(global-set-key (kbd "\e <left>")  'next-source-buffer)

;; Org-mode
(global-set-key (kbd "C-c [")       'hide-subtree)
(global-set-key (kbd "C-c {")       'hide-sublevels)
(global-set-key (kbd "C-c ]")       'show-subtree)
(global-set-key (kbd "C-c }")       'show-all)
(global-set-key (kbd "C-c SPC")     'compact-space)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Encoding type
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Hooks
(add-hook 'erlang-mode-hook 'my-erlang-mode-hook)
(add-hook 'python-mode-hook (local-set-key "\C-c\C-c" 'python-compile))
(add-hook 'text-mode-hook 'turn-on-auto-fill)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Assign mode to file (extensions)
(add-to-list 'auto-mode-alist '("README" . text-mode))
(add-to-list 'auto-mode-alist '("\\.html$" . html-helper-mode))
(add-to-list 'auto-mode-alist '("\\.htm$" . html-helper-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom functions
(defun forward-transpose-lines ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (kill-whole-line)
      (next-line 1)
      (move-beginning-of-line 1)
      (yank))
    (next-line 1)
    (move-to-column col)))
(defun backward-transpose-lines ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (kill-whole-line)
      (previous-line 1)
      (move-beginning-of-line 1)
      (yank))
    (previous-line 2)
    (move-to-column col)))

(defun forward-duplicate-line ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (open-line 1)
      (next-line 1)
      (yank))
    (next-line 1)
    (move-to-column col)))
(defun backward-duplicate-line ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (previous-line 1)
      (open-line 1)
      (next-line 1)
      (yank))
    (previous-line 1)
    (move-to-column col)))

(defun join-next-line ()
  (interactive)
  (let ((col (current-column)))
    (next-line 1)
    (if mark-active ;; Not really working
        (let ((fill-column 999999))
          (fill-paragraph nil))
      (join-line))
    (move-to-column col)))
(defun join-previous-line ()
  (interactive)
  (if mark-active ;; Not really working
      (let ((fill-column 999999))
        (fill-paragraph nil))
    (join-line)))

(defun next-source-buffer ()
  (interactive)
  (next-buffer)
  (if (string-match "^\*.*\*$" (buffer-name))
      (next-source-buffer)))
(defun previous-source-buffer ()
  (interactive)
  (previous-buffer)
  (if (string-match "^\*.*\*$" (buffer-name))
      (previous-source-buffer)))

(defun forward-kill-line ()
  (interactive)
  (if (looking-at "$")
      (delete-char 1)
    (delete-region (point) (line-end-position))))
(defun backward-kill-line ()
  (interactive)
  (if (looking-at "^")
      (delete-backward-char 1)
    (kill-line 0)))
(defun whole-kill-line ()
  (interactive)
  (save-excursion
    (kill-whole-line)))

(defun compact-space ()
  "Kill the whitespace between two non-whitespace characters"
  (interactive "*")
  (save-excursion
    (save-restriction
      (save-match-data
        (progn
          (re-search-backward "[^ \t\r\n]" nil t)
          (re-search-forward "[ \t\r\n]+" nil t)
          (replace-match " " nil nil))))))

(defun highlight-todo ()
  (font-lock-add-keywords nil '(("\\(@todo\\|@fixme\\|XXX\\|TODO\\|FIXME\\)" 1
                                 font-lock-warning-face prepend))))
(defun python-compile ()
  (interactive)
  (compile (concat "python " (buffer-name))))
;;; Original author: ttn at netcom dot com, 28-Jan-1996
;;; Modified for multiple lines: Eric
;;; http://curiousprogrammer.wordpress.com/2009/02/11/simple-emacs-shortcut/
(defun another-line (num-lines)
  "Copies line, preserving cursor column, and increments any numbers found.
  This should probably be generalized in the future.
  Argument NUM-LINES is the number of lines to modify."
  (interactive "p")
  (if (not num-lines) (setq num-lines 0) (setq num-lines (1- num-lines)))
  (let* ((col (current-column))
         (bol (save-excursion (forward-line (- num-lines)) (beginning-of-line) (point)))
         (eol (progn (end-of-line) (point)))
         (line (buffer-substring bol eol)))
    (goto-char bol)
    (while (re-search-forward "[0-9]+" eol 1)
      (let ((num (string-to-int (buffer-substring
                                 (match-beginning 0) (match-end 0)))))
        (replace-match (int-to-string (1+ num))))
      (setq eol (save-excursion (goto-char eol) (end-of-line) (point))))
    (goto-char bol)
    (insert line "\n")
    (move-to-column col)))
;; Original source: http://platypope.org/blog/2007/8/5/a-compendium-of-awesomeness
(defvar isearch-initial-string nil)
(defun isearch-set-initial-string ()
  (remove-hook 'isearch-mode-hook 'isearch-set-initial-string)
  (setq isearch-string isearch-initial-string)
  (isearch-search-and-update))
(defun isearch-forward-at-point (&optional regexp-p no-recursive-edit)
  "Interactive search forward for the symbol at point."
  (interactive "P\np")
  (if regexp-p (isearch-forward regexp-p no-recursive-edit)
    (let* ((end (progn (skip-syntax-forward "w_") (point)))
           (begin (progn (skip-syntax-backward "w_") (point))))
      (if (eq begin end)
          (isearch-forward regexp-p no-recursive-edit)
        (setq isearch-initial-string (buffer-substring begin end))
        (add-hook 'isearch-mode-hook 'isearch-set-initial-string)
        (isearch-forward regexp-p no-recursive-edit)))))

;; Align search results to center of buffer
(defvar isearch-old-scroll-margin-value nil)
(defun isearch-mode-margin-hook ()
  (if isearch-old-scroll-margin-value
      (progn
        (setq scroll-margin isearch-old-scroll-margin-value)
        (setq isearch-old-scroll-margin-value nil))
    (setq isearch-old-scroll-margin-value scroll-margin)
    (setq scroll-margin (/ (window-height) 2))))
(add-hook 'isearch-mode-hook 'isearch-mode-margin-hook)
(add-hook 'isearch-mode-end-hook 'isearch-mode-margin-hook)


;; Delete current word under cursor
(defun mark-current-word ()
  "Put point at beginning of current word, set mark at end."
  (interactive)
  (let* ((opoint (point))
         (word (current-word))
         (word-length (length word)))
    (if (save-excursion
          ;; Avoid signaling error when moving beyond buffer.
          (if (> (point-min)  (- (point) word-length))
              (beginning-of-buffer)
            (forward-char (- (length word))))
          (search-forward word (+ opoint (length word))
                          'noerror))
        (progn (push-mark (match-end 0) nil t)
               (goto-char (match-beginning 0)))
      (error "No word at point" word))))

(defun forward-beginning-word ()
  (interactive)
  (forward-word 2)
  (backward-word 1))

(defun kill-current-word ()
  (interactive)
  (save-excursion (kill-word 1) (backward-kill-word 1)))

;; Kill word or cut region
;; Courtesty to Robin "Rost" for this snippet.
(defun smart-backward-kill-word (arg)
  "Special version of backward-kill-word that swallows spaces
and newlines separate from words. This way a C-w at
beginning-of-line will not chew its way halfway through a word on
the line above.

Is this correct now? It now chews its way through words and
whitespace, anything else get chewed one character at a time."
  (interactive "p")
  (cond ((looking-back "\\s-+")
         (kill-region (point) (progn (re-search-backward "\\S-")
                                     (forward-char 1) (point))))
        ((looking-back "[^a-z0-9A-Z]") (backward-delete-char 1))
        (t (backward-kill-word arg))))

(defun smart-backwards-kill ()
  "`kill-region' if the mark is active, else `backward-kill-word'."
  (interactive)
  (if mark-active
      (call-interactively 'kill-region)
    (call-interactively 'smart-backward-kill-word)))

;; It can restore recently used files easily.
;; Courtesty to Robin "Rost" for this snippet.
(defun recentf-ido-find-file ()
  "Find a recent file using Ido."
  (interactive)
  (let* ((file-assoc-list
          (mapcar (lambda (x)
                    (cons (file-name-nondirectory x)
                          x))
                  recentf-list))
         (filename-list
          (remove-duplicates (mapcar #'car file-assoc-list)
                             :test #'string=))
         (filename (ido-completing-read "Choose recent file: "
                                        filename-list
                                        nil
                                        t)))
    (when filename
      (find-file (cdr (assoc filename
                             file-assoc-list))))))

(recentf-mode t)
(setq recentf-auto-cleanup 300)
(setq recentf-exclude '("^.+\\.ede" "TAGS$"))
(setq recentf-max-saved-items 1000)
(setq recentf-max-menu-items 100)

(defun count-lines (start end)
  "Return number of lines between START and END.            
This is usually the number of newlines between them,        
but can be one more if START is not equal to END            
and the greater of them is not at the start of a line."
  (save-excursion
    (save-restriction
      (narrow-to-region start end)
      (goto-char (point-min))
      (if (eq selective-display t)
          (save-match-data
            (let ((done 0))
              (while (re-search-forward "[\n\C-m]" nil t 40)
                (setq done (+ 40 done)))
              (while (re-search-forward "[\n\C-m]" nil t 1)
                (setq done (+ 1 done)))
              (goto-char (point-max))
              (if (and (/= start end)
                       (not (bolp)))
                  (1+ done)
                done)))
        (- (buffer-size) (forward-line (buffer-size)))))))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom aliases
(defalias 'yes-or-no-p 'y-or-n-p)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Color Themes
;; To see your style colors associations: M-x list-faces-display
;(require 'font-lock)
(add-to-list 'load-path "~/.emacs.d/color-theme")
(add-to-list 'load-path "~/.emacs.d/color-theme/themes")
(require 'color-theme)

;(require 'color-theme-solarized)
;(setq solarized-termcolors 256)
;;(color-theme-solarized-light)
;(color-theme-solarized-dark)

;(load-file "~/.emacs.d/color-theme/themes/color-theme-zenburn.el")
;(color-theme-zenburn)

;(load-file "~/.emacs.d/color-theme/themes/color-theme-drr.el")
;(color-theme-drr)

;(load-file "~/.emacs.d/color-theme/themes/color-theme-almost-monokai.el")
;(color-theme-almost-monokai)

(load-file "~/.emacs.d/color-theme/themes/color-theme-wombat.el")
;(color-theme-wombat)

(load-file "~/.emacs.d/color-theme/themes/color-theme-less.el")
;(color-theme-less)

(load-file "~/.emacs.d/color-theme/themes/color-theme-djui.el")
;(color-theme-djui-light)
(color-theme-djui-dark)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; w3m Browser
(setq browse-url-browser-function 'w3m-browse-url
      w3m-use-cookies             t
      w3m-coding-system           'utf-8
      w3m-file-coding-system      'utf-8
      w3m-file-name-coding-system 'utf-8
      w3m-input-coding-system     'utf-8
      w3m-output-coding-system    'utf-8
      w3m-terminal-coding-system  'utf-8)
(autoload 'w3m-browse-url "org-w3m" "Ask a WWW browser to show a URL." t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Allout mode
(require 'allout)
(allout-init t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; iBuffer mode
(provide 'ibuffer-config)
(require 'ibuffer-config)

(eval-after-load 'ibuffer
  '(progn
     (setq ibuffer-show-empty-filter-groups nil
           ibuffer-always-show-last-buffer  t
           ibuffer-view-ibuffer             t
           ibuffer-default-sorting-mode     'major-mode
           ibuffer-expert                   t)

     (setq ibuffer-never-show-predicates
           (list "\\*Completions\\*"))

     (setq ibuffer-saved-filter-groups
           ' (("default"

               ("elisp"
                (or (filename . "elisp/")
                    (filename . "elisp/etc/initd")
                    (mode . emacs-lisp-mode)))

               ("emacs"
                (or (name . "^\\*scratch\\*$")
                    (name . "^\\*Messages\\*$")
                    (name . "^TAGS\\(<[0-9]+>\\)?$")
                    (name . "^\\*Help\\*$")
                    (name . "^\\*info\\*$")
                    (name . "^\\*Occur\\*$")
                    (name . "^\\*grep\\*$")
                    (name . "^\\*Compile-Log\\*$")
                    (name . "^\\*Backtrace\\*$")
                    (name . "^\\*Process List\\*$")
                    (name . "^\\*gud\\*$")
                    (name . "^\\*Man")
                    (name . "^\\*WoMan")
                    (name . "^\\*Kill Ring\\*$")
                    (name . "^\\*Completions\\*$")
                    (name . "^\\*tramp")
                    (name . "^\\*shell\\*$")
                    (name . "^\\*compilation\\*$")))

               ("org"
                (or (mode . org-mode)
                    (mode . muse-mode)))

               ("agenda"
                (or (name . "^\\*Calendar\\*$")
                    (name . "^diary$")
                    (name . "^\\*Agenda")
                    (name . "^\\*org-")
                    (name . "^\\*Org")))

               ("latex"
                (or (mode . latex-mode)
                    (mode . LaTeX-mode)
                    (mode . bibtex-mode)
                    (mode . reftex-mode)))

               ("shell"
                (or (mode . eshell-mode)
                    (mode . shell-mode)))

               ("erlang code"
                (or (mode . erlang-mode)
                    (mode . erlang-extended-mode)
                    (name . "\\.erl")
                    (name . "\\*erl")
                    (name . "\\.hrl")
                    (name . "\\.yaws")))

               ("erlang"
                (or (name . "\\*derl")
                    (name . "\\*Erl")
                    (name . "\\*wrangler")
                    (name . "\\*trace")
                    (name . "\\*plist")
                    (name . "\\*pid <")
                    (name . "^\\*Wrangler")
                    (name . "^\\*trace")
                    (name . "\\*edb")))

               ("lisp"
                (or (mode . lisp-mode)
                    (mode . repl)
                    (mode . slime-repl-mode)
                    (name . "^\\*slime")
                    (name . "^\\*inferior-lisp")))

               ("code"
                (or (mode . autoconf-mode)
                    (mode . c-mode)
                    (mode . gud-mode)
                    (mode . makefile-mode)
                    (mode . sh-mode)))

               ("version control"
                (or (mode . svn-status-mode)
                    (mode . svn-log-edit-mode)
                    (name . "^\\*svn-")
                    (name . "^\\*vc\\*$")
                    (name . "^\\*Annotate")
                    (name . "\\*[gG]it.*\\*")
                    (name . "^*magit")
                    (name . "^\\*git-")
                    (name . "^\\*vc-")))

               ("ediff"
                (or (mode . ediff-mode)
                    (name . "\\*ediff")
                    (name . "\\*Ediff")))

               ("wiki"
                (mode . mediawiki-mode))

               ("dired"
                (or (mode . dired-mode)))

               ("rcirc"
                (mode . rcirc-mode))

               ("gnus"
                (or (mode . message-mode)
                    (mode . bbdb-mode)
                    (mode . mail-mode)
                    (mode . gnus-group-mode)
                    (mode . gnus-summary-mode)
                    (mode . gnus-article-mode)
                    (name . "^\\.newsrc*")
                    (name . "^\\*nnimap")
                    (name . "^\\*imap")
                    (name . "^\\*gnus")
                    (name . "^\\*BBDB\\*$")
                    (name . "^\\.bbdb$")
                    (name . "^\\.newsrc-dribble"))))))))

(eval-after-load 'ibuffer
  '(progn
     (add-hook 'ibuffer-mode-hook
               (lambda ()
                 (local-set-key (kbd "C-g") 'ibuffer-quit)
                 (ibuffer-switch-to-saved-filter-groups "default")))))

(eval-after-load 'ibuffer
  '(progn
     ;; switching to ibuffer puts the cursor on the most recent buffer
     (defadvice ibuffer (around ibuffer-point-to-most-recent activate) ()
       "Open ibuffer with cursor pointed to most recent buffer name"
       (let ((recent-buffer-name (buffer-name)))
         ad-do-it
         (ibuffer-jump-to-buffer recent-buffer-name)))))

;(eval-after-load 'ibuffer
;  '(progn
;     ;; show git status in ibuffer
;     (when (require 'ibuffer-git)
;       (setq ibuffer-formats
;             '((mark modified read-only
;                     git-status-mini " "
;                     (name 18 18 :left :elide) " "
;                     (size 9 -1 :right) " "
;                     (mode 16 16 :left :elide) " "
;                     ;; (eproject 16 16 :left :elide) " "
;                     (git-status 8 8 :left) " "
;                     filename-and-process)
;               (mark " "
;                     (name 16 -1) " "
;                     filename))))))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Dired-Mode
(add-hook 'dired-mode-hook 'my-dired-mode-hook)
(defun my-dired-mode-hook ()
  (local-set-key (kbd "F") 'dired-find-file-other-window))
(add-hook 'dired-mode-hook 'my-dired-mode-hook)
(defun my-dired-mode-hook ()
  (local-set-key (kbd "<mouse-2>") 'dired-mouse-find-file))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IDo-Mode, better than iswitch mode
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t
      max-mini-window-height 0.25
      ido-max-prospects 100)
(add-hook 'ido-setup-hook 
          (lambda () 
            (define-key ido-completion-map [tab] 'ido-complete)))
;; Can be done better using smex (below)
;(global-set-key (kbd "M-x") 'ido-mx-completion)
(defun ido-mx-completion ()
  (interactive)
  (call-interactively
   (intern
    (ido-completing-read "M-x " (all-completions "" obarray 'commandp)))))

;; smex - super M-x
(load-file "~/.emacs.d/smex.el")
(require 'smex)
(smex-initialize)
(setq smex-save-file "~/.emacs.d/smex-items")
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
(global-set-key (kbd "C-x M-x") 'execute-extended-command)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Whitespace Mode
(require 'whitespace)
(setq whitespace-style       (quote (face tabs tab-mark lines-tail)))
(setq whitespace-action      nil)
(setq whitespace-line-column 80)
(setq whitespace-display-mappings
      '((tab-mark     ?\t   [?\xBB ?\t] [?\\ ?\t]) ; tab
        ))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Parentheses Mode
(load-file "~/.emacs.d/highlight-parentheses.el")
(require 'highlight-parentheses)
(highlight-parentheses-mode t)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Magit
;; Will only work if you did "make && sudo make install" on it
;; Deactivated at the moment. It brings error during commit message edits
;; and I don't see its use case yet.
;; (require 'magit)
;; (add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . magit-commit-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Erlang Mode
(add-to-list 'load-path "~/dev/OTP/install/R14B03/lib/erlang/lib/tools-2.6.6.4/emacs")
(add-to-list 'exec-path "~/dev/OTP/install/R14B03/bin")
(setq erlang-root-dir "~/dev/OTP/install/R14B03")

(require 'erlang-start)
(setq erlang-tab-mode          nil
      erlang-indent-level      '2
      erlang-electric-commands '(erlang-electric-semicolon
                                 erlang-electric-comma
                                 erlang-electric-arrow
                                 erlang-electric-newline
                               ; erlang-electric-gt        ; ...annoying
                                 erlang-electric-lt))
(add-to-list 'auto-mode-alist '("\\.[eh]rl$" . erlang-mode))
(add-to-list 'auto-mode-alist '("\\.yaws$" . erlang-mode))
(add-to-list 'interpreter-mode-alist '("escript" . erlang-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Wrangler
(add-to-list 'load-path "~/.emacs.d/wrangler/elisp")
(require 'wrangler)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Distel
;; Handle from now on by Wrangler
;(add-to-list 'load-path "~/.emacs.d/distel/elisp")
;(require 'distel)
;(distel-setup)

; Nice new distel extension for Record and Macro lookup
;(setq erlookup-roots     '("~/dev/klarna/kred/lib"
;                           "~/dev/klarna/kred/test/shared"
;                           "~/dev/OTP/src/otp_r14b02_klarna/lib")
(setq erl-nodename-cache 'distel\@simpknot)

(defun distel ()
  (interactive)
  (set 'cmd (concat "erl -sname distel "
                    "-pa $HOME/.emacs.d/distel/ebin "
                    "-pa $HOME/dev/klarna/kred_master/lib/*/ebin "
                    "-pa $HOME/dev/klarna/kred_master/test/shared/ebin "
                    "-pa $HOME/dev/klarna/soapbox/ebin "
                    "-pa $HOME/dev/klarna/rpc_api/ebin "))
  (async-shell-command cmd)
  (other-window 1)
  (delete-window)
  (message "Started Distel Erlang node."))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Flymake
(require 'flymake)

(defun flymake-erlang-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
                     'flymake-create-temp-inplace))
         (local-file (file-relative-name temp-file
                                         (file-name-directory buffer-file-name))))
    (list "~/.emacs.d/flymake/eflymake" (list local-file))))

(add-to-list 'flymake-allowed-file-name-masks '("\\.erl$" flymake-erlang-init))

(defun my-erlang-mode-hook ()
  (interactive)
  (linum-mode)
  (setq truncate-lines t)
  (setq truncate-partial-width-windows nil)
  (setq whitespace-style       (quote (face tabs lines-tail)))
  (setq whitespace-action      nil)
  (setq whitespace-line-column 80)
  (whitespace-mode)
  ;; (flymake-mode t)
  (highlight-todo)
  (highlight-parentheses-mode)
  (allout-mode))

; Somehow there is a bug, that causes Emacs not to start correctly. Error:
; flymake-get-file-name-mode-and-masks: Invalid file-name

;; Find in kred dirs
;(defun kfind (&optional word)
;  (interactive "r")
(defun kfind (word)
  (interactive "MFind: ")
  (kfind-at
   ;(concat (car (split-string (buffer-file-name) "lib")) "{lib,test}/")
   "$HOME/dev/klarna/kred_master/{lib,test}/"
   word))

(defun kfind-at (path word)
  (grep-find
   (concat "find " path 
           (concat " -type f \\( -name '*.erl' -o -name '*.hrl' \\) | xargs grep --color=auto " word))))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Efene/Ifene Mode
(add-to-list 'load-path "~/.emacs.d/efene-mode")
;(require 'ifene)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Markdown Mode
(add-to-list 'load-path "~/.emacs.d/markdown-mode")
(autoload 'markdown-mode "markdown-mode.el" "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
(add-hook 'markdown-mode-hook '(lambda() (local-set-key (kbd "<backtab>") 'markdown-cycle)))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Ruby Mode
(add-to-list 'load-path "~/.emacs.d/ruby-mode")
(autoload 'ruby-mode "ruby-mode" "Mode for editing ruby source files")
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))
(autoload 'run-ruby "inf-ruby" "Run an inferior Ruby process")
(autoload 'inf-ruby-keys "inf-ruby" "Set local key defs for inf-ruby in ruby-mode")
(add-hook 'ruby-mode-hook '(lambda () (inf-ruby-keys)))
(add-hook 'ruby-mode-hook 'turn-on-font-lock)
(autoload 'rubydb "rubydb3x" "Ruby debugger" t)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Yet Another Snippet plugin
;; See http://yasnippet.googlecode.com/svn/trunk/doc/snippet-development.html
(add-to-list 'load-path "~/.emacs.d/yasnippet")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/yasnippet/snippets")

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Auto-complete mode
;; See: https://github.com/m2ym/auto-complete.git
(add-to-list 'load-path "~/.emacs.d/auto-complete")
(require 'auto-complete-config)
(add-to-list 'load-path "~/.emacs.d")
(require 'auto-complete-distel)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RCIRC - Emacs IRC
(load-file "~/.emacs.d/rcirc/rcirc.el")
(load-file "~/.emacs.d/rcirc/rcirc-notify.el")
;(load-file "~/.emacs.d/rcirc/rcirc-color.el")
(require 'rcirc)
(eval-after-load 'rcirc '(require 'rcirc-notify))
;(eval-after-load 'rcirc '(require 'rcirc-color))
;; (rcirc-track-minor-mode 1)
(add-hook 'rcirc-mode-hook (lambda ()
                             (rcirc-track-minor-mode 1)
                             (rcirc-omit-mode)))

(setq rcirc-default-nick           "uwe"
      rcirc-default-user-name      "uwe"
      rcirc-default-full-name      "Uwe Dauernheim"
      rcirc-decode-coding-system   'undecided
      rcirc-time-format            "%H:%M:%S "
      rcirc-startup-channels-alist '(("#tech" "#core" "#staging"))
      rcirc-prompt                 "         %n> "
      rcirc-fill-prefix            "         "
      rcirc-fill-column            65
      rcirc-log-flag               t
      rcirc-buffer-maximum-lines   10000
      rcirc-bright-nicks           (quote ("jakob" "fabian" "bjorn" "dklee" "masse"))
      rcirc-keywords               (quote ("erlang"))
      rcirc-server-alist           '(("irc.hq.kred" :channels ("#tech" "#core" "#staging")))
      rcirc-ignore-list            '()
      rcirc-omit-responses         '("JOIN" "PART" "QUIT" "NICK" "AWAY" "MODE"))

;; Wrap long lines according to the width of the window
(add-hook 'window-configuration-change-hook '(lambda ()
                                               (setq rcirc-fill-column (- (window-width) 2))))

(defun rcirc-kill-all-buffers ()
  (interactive)
  (kill-all-mode-buffers 'rcirc-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom set variables
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(allout-auto-activation "t")
 '(column-number-mode t)
 '(fringe-mode 0 nil (fringe))
 '(safe-local-variable-values (quote ((allout-layout . t) allout-layout t)))
 '(tooltip-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(font-lock-type-face ((t (:foreground "#FFFFFF" :weight normal)))))
 (if window-system
    (custom-set-faces
     '(default ((t (:inherit nil :stipple nil :background "#272821" :foreground "#F8F8F2" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 140 :width normal :foundry "unknown" :family "Terminus"))))
     '(mode-line ((t (:box nil))))
     '(mode-line-inactive ((t (:box nil))))
     '(whitespace-line ((t (:background "gray20" :foreground "#D62E00"))))))
