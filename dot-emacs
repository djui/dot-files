;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GLOBAL CONFIGURATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Configurations
;; These do not work with setq(-default)
(if window-system
    (progn
      (tool-bar-mode     -1) ; nil would only toggle
      (scroll-bar-mode   -1) ; nil would only toggle
      (mouse-wheel-mode  t)))
(menu-bar-mode           -1) ; nil would only toggle

(global-hl-line-mode     t)
;(global-linum-mode      t)
;(global-whitespace-mode t)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DEFAULTS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; List of useful settings: http://www.emacswiki.org/emacs/EmacsCrashCode
(setq-default user-full-name               "Uwe Dauernheim"
              user-mail-address            "uwe@dauernheim.net"
              ;; Annoying stuff
              inhibit-startup-echo-area-message t
              inhibit-startup-screen       t
              inhibit-startup-message      t
              initial-scratch-message      nil
              visible-bell                 nil
              ;; Show date and time
              ;; Not needed at the moment due to tmux
              display-time-day-and-date    nil
              display-time-24hr-format     t
              ;; Save session to reopen next time
              desktop-save-mode            t
              ;; Compilation help
              byte-compile-warnings        nil
              compilation-scroll-output    t
              compilation-window-height    10
              ;; Combine killring and X clipboard
              ;; We don't want this if we don't really need X
              ; x-select-enable-clipboard    t
              ; interprogram-paste-function  'x-cut-buffer-or-selection-value
              ;; Completion
              completion-ignore-case       t
              pcomplete-ignore-case        t
              ;; Selection mode - note: doesn't work in emacs -nw
              shift-select-mode            t
              delete-selection-mode        t
              transient-mark-mode          t
              ;; Line numbering mode
              global-visual-line-mode      t
              line-number-mode             t
              column-number-mode           t
              linum-format                 "%3d "
              truncate-lines               -1
              ;; Syntax-, region mark-, parentals-Highlighting
              global-font-lock-mode        t
              font-lock-maximum-decoration t
              highlight-todo               t
              ;; Default tab width
              indent-tabs-mode             nil
              tab-width                    4 ; to show old style correctly
              c-basic-offset               2
              py-indent-offset             2
              js-indent-level              2
              rust-indent-unit             2
              ;; Have a border above and below the cursor while scrolling
              scroll-margin                5
              ;; Only scroll by 1 line a time
              scroll-up-aggressively       0.1
              scroll-down-aggressively     0.1
              scroll-conservatively        most-positive-fixnum
              scroll-preserve-screen-position t
              ;; Keep old backups of changed files
              make-backup-files            t
              backup-by-copying            t
              version-control              t
              delete-old-versions          t
              kept-new-versions            10
              kept-old-versions            10
              backup-directory-alist       '(("." . "~/.emacs.d/backups"))
              undo-limit                   100000
              ;; Version control
              vc-follow-symlinks           nil
              ;; Change frame title
              frame-title-format           (setq icon-title-format
                                                 (format "%%b - %semacs"
                                                         (if (featurep 'xemacs) "x" "")))
              ;; Mac specific options
              mac-command-modifier         'meta
              ;; Use Chromium as default browser for links instead of Firefox
              ; browse-url-browser-function  'browse-url-generic
              ; browse-url-generic-program   "chromium-browser"
              ;; Initial modes
              ; initial-major-mode        'erlang-mode
              ; default-major-mode        'erlang-mode
              fill-column                  80
              )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ENCODINGS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Encoding type
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system       'utf-8)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ALIASES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom aliases
(defalias 'yes-or-no-p 'y-or-n-p)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PACKAGE MANAGER
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Package manager
(require 'package)
(add-to-list 'package-archives '("elpa"      . "http://tromey.com/elpa/"))
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
;(add-to-list 'package-archives '("gnu"       . "http://elpa.gnu.org/packages/"))
(package-initialize)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; THEMES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Color Themes
(load-theme 'djui t)
;;(load-theme 'github t)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GLOBAL KEYBINDINGS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Global keybindings
;; Not belowing to a specific mode.
;; See: http://wttools.sourceforge.net/emacs-stuff/emacs-keybindings.html
(global-set-key (kbd "M-g")    'goto-line)
(global-set-key (kbd "M-p")    'backward-paragraph)
(global-set-key (kbd "M-n")    'forward-paragraph)

(global-set-key (kbd "C-a")    'back-to-indentation)

(global-set-key (kbd "C-c d")  'forward-duplicate-line)
(global-set-key (kbd "C-c D")  'backward-duplicate-line)
(global-set-key (kbd "C-c e")  'eval-buffer)
(global-set-key (kbd "C-c j")  'join-next-line)
(global-set-key (kbd "C-c J")  'join-previous-line)
(global-set-key (kbd "C-c r")  'replace-regexp)
(global-set-key (kbd "C-c /")  'comment-or-uncomment-region)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GLOBAL MOUSE/TRACKPAD MODE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] '(lambda ()
                               (interactive)
                               (scroll-down 1)))
  (global-set-key [mouse-5] '(lambda ()
                               (interactive)
                               (scroll-up 1)))
  (defun track-mouse (e))
  (setq mouse-sel-mode t))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FUNCTIONS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom functions
(defun forward-duplicate-line ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (open-line 1)
      (next-line 1)
      (yank))
    (next-line 1)
    (move-to-column col)))

(defun backward-duplicate-line ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (move-beginning-of-line 1)
      (kill-line)
      (yank)
      (previous-line 1)
      (open-line 1)
      (next-line 1)
      (yank))
    (previous-line 1)
    (move-to-column col)))

(defun join-next-line ()
  (interactive)
  (let ((col (current-column)))
    (next-line 1)
    (if mark-active ;; Not really working
        (let ((fill-column 999999))
          (fill-paragraph nil))
      (join-line))
    (move-to-column col)))

(defun join-previous-line ()
  (interactive)
  (if mark-active ;; Not really working
      (let ((fill-column 999999))
        (fill-paragraph nil))
    (join-line)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MODES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(add-to-list 'interpreter-mode-alist '("bash"   . sh-mode))
(add-to-list 'interpreter-mode-alist '("sh"     . sh-mode))
(add-to-list 'interpreter-mode-alist '("zsh"    . sh-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))

(add-to-list 'magic-mode-alist '("<!DOCTYPE html .+DTD XHTML .+>" . nxml-mode))
(add-to-list 'magic-mode-alist '("<html>"                         . html-mode))

(add-to-list 'auto-mode-alist '("\\.asciidoc$"  . adoc-mode))
(add-to-list 'auto-mode-alist '("\\.clj$"       . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.cljs$"      . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.conf$"      . js-mode))
(add-to-list 'auto-mode-alist '("\\.gitconfig$" . gitconfig-mode))
(add-to-list 'auto-mode-alist '("\\.gitignore$" . gitignore-mode))
(add-to-list 'auto-mode-alist '("\\.js$"        . js-mode))
(add-to-list 'auto-mode-alist '("\\.md$"        . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.pp$"        . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.py$"        . python-mode))
(add-to-list 'auto-mode-alist '("\\.yaml$"      . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.ya?ml$"     . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.zsh$"       . sh-mode))
;;(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . magit-commit-mode))


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Elisp mode
(add-hook 'clojure-mode-hook 'paredit-mode)
(add-hook 'clojure-mode-hook 'show-paren-mode)
(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
(add-hook 'clojure-mode-hook 'highlight-parentheses-mode)



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Recentf mode
(recentf-mode t)
(setq recentf-auto-cleanup    300
      recentf-max-saved-items 1000
      recentf-max-menu-items  100
      recentf-keep '(file-remote-p file-readable-p))
(add-to-list 'recentf-exclude "\\.ido\\.last")



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; iBuffer mode
(provide 'ibuffer-config)
(require 'ibuffer-config)

(global-set-key (kbd "C-x C-b") 'ibuffer)

(eval-after-load 'ibuffer
  '(progn
     (setq ibuffer-show-empty-filter-groups nil
           ibuffer-always-show-last-buffer  t
           ibuffer-view-ibuffer             t
           ibuffer-default-sorting-mode     'major-mode
           ibuffer-expert                   t)

     (setq ibuffer-never-show-predicates
           (list "\\*Completions\\*"))

     (setq ibuffer-saved-filter-groups
           ' (("default"

               ("elisp"
                (or (filename . "elisp/")
                    (filename . "elisp/etc/initd")
                    (mode . emacs-lisp-mode)))

               ("emacs"
                (or (name . "^\\*scratch\\*$")
                    (name . "^\\*Messages\\*$")
                    (name . "^TAGS\\(<[0-9]+>\\)?$")
                    (name . "^\\*Help\\*$")
                    (name . "^\\*info\\*$")
                    (name . "^\\*Occur\\*$")
                    (name . "^\\*grep\\*$")
                    (name . "^\\*Compile-Log\\*$")
                    (name . "^\\*Backtrace\\*$")
                    (name . "^\\*Process List\\*$")
                    (name . "^\\*gud\\*$")
                    (name . "^\\*Man")
                    (name . "^\\*WoMan")
                    (name . "^\\*Kill Ring\\*$")
                    (name . "^\\*Completions\\*$")
                    (name . "^\\*tramp")
                    (name . "^\\*shell\\*$")
                    (name . "^\\*compilation\\*$")))

               ("org"
                (or (mode . org-mode)
                    (mode . muse-mode)))

               ("agenda"
                (or (name . "^\\*Calendar\\*$")
                    (name . "^diary$")
                    (name . "^\\*Agenda")
                    (name . "^\\*org-")
                    (name . "^\\*Org")))

               ("latex"
                (or (mode . latex-mode)
                    (mode . LaTeX-mode)
                    (mode . bibtex-mode)
                    (mode . reftex-mode)))

               ("shell"
                (or (mode . eshell-mode)
                    (mode . shell-mode)))

               ("erlang code"
                (or (mode . erlang-mode)
                    (mode . erlang-extended-mode)
                    (name . "\\.erl")
                    (name . "\\*erl")
                    (name . "\\.hrl")
                    (name . "\\.yaws")))

               ("erlang"
                (or (name . "\\*derl")
                    (name . "\\*Erl")
                    (name . "\\*wrangler")
                    (name . "\\*trace")
                    (name . "\\*plist")
                    (name . "\\*pid <")
                    (name . "^\\*Wrangler")
                    (name . "^\\*trace")
                    (name . "\\*edb")))

               ("lisp"
                (or (mode . lisp-mode)
                    (mode . repl)
                    (mode . slime-repl-mode)
                    (name . "^\\*slime")
                    (name . "^\\*inferior-lisp")))

               ("code"
                (or (mode . autoconf-mode)
                    (mode . c-mode)
                    (mode . gud-mode)
                    (mode . makefile-mode)
                    (mode . sh-mode)))

               ("version control"
                (or (mode . svn-status-mode)
                    (mode . svn-log-edit-mode)
                    (name . "^\\*svn-")
                    (name . "^\\*vc\\*$")
                    (name . "^\\*Annotate")
                    (name . "\\*[gG]it.*\\*")
                    (name . "^*magit")
                    (name . "^\\*git-")
                    (name . "^\\*vc-")))

               ("ediff"
                (or (mode . ediff-mode)
                    (name . "\\*ediff")
                    (name . "\\*Ediff")))

               ("wiki"
                (or (mode . mediawiki-mode)))

               ("dired"
                (or (mode . dired-mode)))

               ("rcirc"
                (or (mode . rcirc-mode)))

               ("gnus"
                (or (mode . message-mode)
                    (mode . bbdb-mode)
                    (mode . mail-mode)
                    (mode . gnus-group-mode)
                    (mode . gnus-summary-mode)
                    (mode . gnus-article-mode)
                    (name . "^\\.newsrc*")
                    (name . "^\\*nnimap")
                    (name . "^\\*imap")
                    (name . "^\\*gnus")
                    (name . "^\\*BBDB\\*$")
                    (name . "^\\.bbdb$")
                    (name . "^\\.newsrc-dribble"))))))))

(eval-after-load 'ibuffer
  '(progn
     (add-hook 'ibuffer-mode-hook
               (lambda ()
                 (local-set-key (kbd "C-g") 'ibuffer-quit)
                 (ibuffer-switch-to-saved-filter-groups "default")))))

(eval-after-load 'ibuffer
  '(progn
     ;; switching to ibuffer puts the cursor on the most recent buffer
     (defadvice ibuffer (around ibuffer-point-to-most-recent activate) ()
       "Open ibuffer with cursor pointed to most recent buffer name"
       (let ((recent-buffer-name (buffer-name)))
         ad-do-it
         (ibuffer-jump-to-buffer recent-buffer-name)))))

(eval-after-load 'ibuffer
  '(progn
     ;; show git status in ibuffer
     (add-to-list 'load-path "~/.emacs.d/ibuffer-git")
     (when (require 'ibuffer-git)
       (setq ibuffer-formats
             '((mark modified read-only
                     git-status-mini " "
                     (name 18 18 :left :elide) " "
                     (size 9 -1 :right) " "
                     (mode 16 16 :left :elide) " "
                     ;; (eproject 16 16 :left :elide) " "
                     (git-status 8 8 :left) " "
                     filename-and-process)
               (mark " "
                     (name 16 -1) " "
                     filename))))))



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IDo mode, better than iswitch mode
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t
      ido-max-prospects        75)
(global-set-key (kbd "M-x")     'ido-mx-completion)
(global-set-key (kbd "C-x C-k") 'ido-kill-buffer)
(global-set-key (kbd "C-x f")   'recentf-ido-find-file)

(defun ido-mx-completion ()
  (interactive)
  (call-interactively
   (intern
    (ido-completing-read "M-x " (all-completions "" obarray 'commandp)))))

;; It can restore recently used files easily.
;; Courtesty to Robin "Rost" for this snippet.
(require 'cl)
(defun recentf-ido-find-file ()
  "Find a recent file using Ido."
  (interactive)
  (let* ((file-assoc-list
          (mapcar (lambda (x) (cons (file-name-nondirectory x) x)) recentf-list))
         (filename-list
          (remove-duplicates (mapcar #'car file-assoc-list) :test #'string=))
         (filename
          (ido-completing-read "Choose recent file: " filename-list nil t)))
    (when filename
      (find-file (cdr (assoc filename file-assoc-list))))))



;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Clojure mode
(add-hook 'clojure-mode-hook 'cider-mode)
(add-hook 'clojure-mode-hook 'paredit-mode)
(add-hook 'clojure-mode-hook 'show-paren-mode)
(add-hook 'clojure-mode-hook 'rainbow-delimiters-mode)
(add-hook 'clojure-mode-hook 'highlight-parentheses-mode)

(setq completion-at-point-functions       '(auto-complete)
      nrepl-hide-special-buffers          t
      cider-repl-pop-to-buffer-on-connect nil
      cider-repl-popup-stacktraces        nil
      cider-auto-select-error-buffer      nil
      cider-popup-stacktraces             t)

(global-set-key (kbd "\e <left>")  'paredit-backward-slurp-sexp)
(global-set-key (kbd "\e <right>") 'paredit-forward-slurp-sexp)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Dockerfile mode
(add-to-list 'load-path "~/.emacs.d/dockerfile-mode/")
(require 'dockerfile-mode)
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))


;; wedge-ws mode
(load "~/.emacs.d/wedge-ws")
(require 'wedge-ws)
(global-set-key (kbd "C-c f")    'wedge-ws-inc)
(global-set-key (kbd "C-c b")    'wedge-ws-dec)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; CUSTOMIZATION
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes (quote ("a3780105f37819a70a65c527f748f1c76293190c2aadd6014b01fcc8d5f555ee" "923faef2c7ed017e63f517703c846c6190c31400261e8abdb1be06d5b46ea19a" "dd4db38519d2ad7eb9e2f30bc03fba61a7af49a185edfd44e020aa5345e3dca7" "fb4bf07618eab33c89d72ddc238d3c30918a501cf7f086f2edf8f4edba9bd59f" default))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background nil)))))
