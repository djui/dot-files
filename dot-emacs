;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Configurations
;; These do not work with setq(-default)
(tool-bar-mode         -1) ; nil toggles
(scroll-bar-mode       -1) ; nil toggles
(menu-bar-mode         -1) ; nil toggles
(global-linum-mode      t)
(global-hl-line-mode    t)
(global-whitespace-mode t)
(mouse-wheel-mode       t)

;; List of useful settings: http://www.emacswiki.org/emacs/EmacsCrashCode
(setq-default user-full-name               "Uwe Dauernheim"
              user-mail-address            "uwe@klarna.com"
              ;; Annoying stuff
              inhibit-startup-echo-area-message t
              inhibit-startup-screen       t
              inhibit-startup-message      t
              initial-scratch-message      nil
              visible-bell                 nil
              ;; Show date and time
              ;; Not needed at the moment due to tmux
              display-time-day-and-date    nil
              display-time-24hr-format     t
              ;; Save session to reopen next time
              desktop-save-mode            t
              ;; Compilation help
              byte-compile-warnings        nil
              compilation-scroll-output    t
              compilation-window-height    10
              ;; Combine killring and X clipboard
              x-select-enable-clipboard    t
              interprogram-paste-function  'x-cut-buffer-or-selection-value
              ;; Completion
              completion-ignore-case       t
              pcomplete-ignore-case        t
              ;; Selection mode
              shift-select-mode            t
              delete-selection-mode        t
              transient-mark-mode          t
              ;; Line numbering mode
              global-visual-line-mode      t
              line-number-mode             t
              column-number-mode           t
              linum-format                 "%3d "
              ;; Syntax-, region mark-, parentals-Highlighting
              global-font-lock-mode        t
              font-lock-maximum-decoration t
              show-paren-mode              t
              ;; Default tab width
              tab-width                    2
              c-basisc-indent              2
              c-basic-offset               2
              py-indent-offset             2
              indent-tabs-mode             nil
              ;; Have a border above and below the cursor while scrolling
              scroll-margin                5
              ;; Only scroll by 1 line a time
              scroll-up-aggressively       0.1
              scroll-down-aggressively     0.1
              scroll-conservatively        most-positive-fixnum
              scroll-preserve-screen-position t
              ;; Keep old backups of changed files
              make-backup-files            t
              backup-by-copying            t
              version-control              t
              delete-old-versions          t
              kept-new-versions            10
              kept-old-versions            10
              backup-directory-alist       '(("." . "~/.emacs.d/backups"))
              undo-limit                   100000
              ;; Scrolling and mouse
              xterm-mouse-mode             t
              ;; Version control
              vc-follow-symlinks           nil
              ;; Change frame title
              frame-title-format           (setq icon-title-format
                                                 (format "%%b - %semacs"
                                                         (if (featurep 'xemacs) "x" "")))
              ;; Highlight long lines
              whitespace-style             (quote (tabs lines-tail))
              whitespace-action            nil
              whitespace-line-column       80
              ;; Initial modes
              ;;initial-major-mode          'erlang-mode
              ;;default-major-mode          'erlang-mode
              )

;; Display time (next to date)
;; Not needed at the moment due to tmux
;; (display-time)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Global keybindings
;; See: http://wttools.sourceforge.net/emacs-stuff/emacs-keybindings.html
(global-set-key (kbd "M-g")         'goto-line)
(global-set-key (kbd "C-h C-c")     'highlight-changes-mode)
(global-set-key (kbd "C-t")         'transpose-lines)
(global-set-key (kbd "C-k")         'forward-kill-line) ; doesn't fill the kill ring
(global-set-key (kbd "M-k")         'backward-kill-line)
(global-set-key (kbd "C-M-k")       'whole-kill-line)
(global-set-key (kbd "M-d")         'another-line)
;; Resize windows keyboard shortcuts
;;(global-set-key (kbd "M-<left>")   'shrink-window-horizontally) ; doesn't work in emacs -nw
;;(global-set-key (kbd "M-<right>")  'enlarge-window-horizontally) ; doesn't work in emacs -nw
(global-set-key (kbd "\e <up>")      'shrink-window) ; \e because only works like that in emacs -nw
(global-set-key (kbd "\e <down>")    'enlarge-window) ; \e because only works like that in emacs -nw

;;(global-set-key (kbd "\e\t")         'previous-source-buffer)
;;(global-set-key (kbd "\e <left>")  'next-source-buffer)
(global-set-key (kbd "C-/")          'comment-or-uncomment-region) ; doesn't work in emacs -nw

;; Format Erlang code like Eclipse
(global-set-key (kbd "C-f")         'erlang-indent-function)
;;(global-set-key (kbd "C-M-f")       'erlang-indent-current-buffer)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Encoding type
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Hooks
(add-hook 'erlang-mode-hook 'my-erlang-mode-hook)
(add-hook 'python-mode-hook (local-set-key "\C-c\C-c" 'python-compile))
(add-hook 'text-mode-hook 'turn-on-auto-fill)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Assign mode to file (extensions)
(add-to-list 'auto-mode-alist '("README" . text-mode))
(add-to-list 'auto-mode-alist '("\\.html$" . html-helper-mode))
(add-to-list 'auto-mode-alist '("\\.htm$" . html-helper-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom functions
(defun next-source-buffer ()
  (interactive)
  (next-buffer)
  (if (string-match "^\*.*\*$" (buffer-name))
      (next-source-buffer)))
(defun previous-source-buffer ()
  (interactive)
  (previous-buffer)
  (if (string-match "^\*.*\*$" (buffer-name))
      (previous-source-buffer)))
(defun forward-kill-line ()
  (interactive)
  (if (looking-at "^$")
      (delete-char 1)
    (delete-region (point) (line-end-position))))
(defun backward-kill-line ()
  (interactive)
  (kill-line 0))
(defun whole-kill-line ()
  (interactive)
  (delete-region (line-beginning-position) (line-end-position)))
(defun highlight-todo ()
  (font-lock-add-keywords nil '(("\\(@todo\\|@fixme\\|XXX\\|TODO\\|FIXME\\)" 1
                                 font-lock-warning-face prepend))))
(defun python-compile ()
  (interactive) (compile (concat "python " (buffer-name))))
(defun duplicate-line ()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank))
;;; Original author: ttn at netcom dot com, 28-Jan-1996
;;; Modified for multiple lines: Eric
;;; http://curiousprogrammer.wordpress.com/2009/02/11/simple-emacs-shortcut/
(defun another-line (num-lines)
  "Copies line, preserving cursor column, and increments any numbers found.
  This should probably be generalized in the future.
  Argument NUM-LINES is the number of lines to modify."
  (interactive "p")
  (if (not num-lines) (setq num-lines 0) (setq num-lines (1- num-lines)))
  (let* ((col (current-column))
         (bol (save-excursion (forward-line (- num-lines)) (beginning-of-line) (point)))
         (eol (progn (end-of-line) (point)))
         (line (buffer-substring bol eol)))
    (goto-char bol)
    (while (re-search-forward "[0-9]+" eol 1)
      (let ((num (string-to-int (buffer-substring
                                 (match-beginning 0) (match-end 0)))))
        (replace-match (int-to-string (1+ num))))
      (setq eol (save-excursion (goto-char eol) (end-of-line) (point))))
    (goto-char bol)
    (insert line "\n")
    (move-to-column col)))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom aliases
(defalias 'yes-or-no-p 'y-or-n-p)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Color Themes
;; To see your style colors associations: M-x list-faces-display
;(require 'font-lock)
(add-to-list 'load-path "~/.emacs.d/color-theme")
(require 'color-theme)
(load-file "~/.emacs.d/color-theme/themes/color-theme-djui.el")
(color-theme-djui)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IDo-Mode, better than iswitch mode
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t
      max-mini-window-height 0.25
      ido-max-prospects 100)
(add-hook 'ido-setup-hook 
          (lambda () 
            (define-key ido-completion-map [tab] 'ido-complete)))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Whitespace Mode
(require 'whitespace)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Parentheses Mode
(load-file "~/.emacs.d/highlight-parentheses.el")
(require 'highlight-parentheses)
(highlight-parentheses-mode t)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Magit
;; Will only work if you did "make && sudo make install" on it
;; Deactivated at the moment. It brings error during commit message edits
;; and I don't see its use case yet.
;; (require 'magit)
;; (add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . magit-commit-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Erlang Mode
(add-to-list 'load-path "~/dev/OTP/src/R13B04/lib/tools/emacs")
(add-to-list 'exec-path "~/dev/OTP/install/R13B04/bin")
(setq erlang-root-dir "~/dev/OTP/install/R13B04")

(require 'erlang-start)
(setq erlang-tab-mode nil)
(setq erlang-electric-commands t)
(setq erlang-indent-level '2)
(add-to-list 'auto-mode-alist '("\\.[eh]rl$" . erlang-mode))
(add-to-list 'auto-mode-alist '("\\.yaws$" . erlang-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Distel
(add-to-list 'load-path "~/.emacs.d/distel/elisp")
(require 'distel)
(distel-setup)
; Nice new distel extension for Record and Macro lookup
(setq erlookup-roots '("~/dev/klarna/kred/lib"
                       "~/dev/OTP/otp/lib"))
(setq erl-nodename-cache 'distel\@simpknot)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Flymake
(require 'flymake)

(defun flymake-erlang-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
                     'flymake-create-temp-inplace))
         (local-file (file-relative-name temp-file
                                         (file-name-directory buffer-file-name))))
    (list "~/.emacs.d/flymake/eflymake" (list local-file))))

(add-to-list 'flymake-allowed-file-name-masks '("\\.erl$" flymake-erlang-init))

(defun my-erlang-mode-hook ()
;;  (flymake-mode t)
  (highlight-todo))
; Somehow there is a bug, that causes Emacs not to start correctly. Error:
; flymake-get-file-name-mode-and-masks: Invalid file-name

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Efene/Ifene Mode
(add-to-list 'load-path "~/.emacs.d/efene-mode")
(require 'ifene)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Scala Mode
(add-to-list 'load-path "~/.emacs.d/scala-mode")
(require 'scala-mode-auto)

;; Ensime for Scala Mode
(add-to-list 'load-path "~/.emacs.d/ensime/elisp")
(require 'ensime)
(add-hook 'scala-mode-hook 'ensime-scala-mode-hook)

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lua Mode
(add-to-list 'load-path "~/.emacs.d/lua-mode")
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Markdown Mode
(add-to-list 'load-path "~/.emacs.d/markdown-mode")
(autoload 'markdown-mode "markdown-mode.el" "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Yet Another Snippet plugin
;; See http://yasnippet.googlecode.com/svn/trunk/doc/snippet-development.html
(add-to-list 'load-path "~/.emacs.d/yasnippet")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/yasnippet/snippets")

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RCIRC - Emacs IRC
(require 'rcirc)
;; rcirc-color doesn't work yet: Wrong type argument: "Wrong type argument: number-or-marker-p, nil"
;; (load-file "~/.emacs.d/rcirc-color.el")
;; (eval-after-load 'rcirc '(require 'rcirc-color))
(load-file "~/.emacs.d/rcirc-notify.el")
(eval-after-load 'rcirc '(require 'rcirc-notify))
;; (rcirc-track-minor-mode 1)
(add-hook 'rcirc-mode-hook
          (lambda ()
            (rcirc-track-minor-mode 1)))

(setq rcirc-default-nick "uwe"
      rcirc-default-user-name "uwe"
      rcirc-default-full-name "Uwe Dauernheim"
      rcirc-decode-coding-system 'undecided
      rcirc-time-format "%H:%M:%S "
      rcirc-startup-channels-alist '(("#tech" "#kong"))
      rcirc-prompt "%t %n> "
      rcirc-fill-prefix "      "
      rcirc-fill-column 65
      rcirc-log-flag t
      rcirc-buffer-maximum-lines 10000
      rcirc-bright-nicks (quote ("happi" "uwiger" "hansn"))
      rcirc-keywords (quote ("uwe" "happi" "jakob"))
      rcirc-server-alist '(("irc.hq.kred" :channels ("#tech" "#kong")))
      rcirc-ignore-list '()
      rcirc-omit-responses '("JOIN" "PART" "QUIT")) ;; "NICK" "AWAY"))

;; Change the color of my own nickname
(set-face-foreground 'rcirc-my-nick "gray" nil)

;; Wrap long lines according to the width of the window
(add-hook 'window-configuration-change-hook
          '(lambda ()
             (setq rcirc-fill-column (- (window-width) 2))))

(defun rcirc-kill-all-buffers ()
  (interactive)
  (kill-all-mode-buffers 'rcirc-mode))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Delete old backup files
(message "Deleting old backup files...")
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files temporary-file-directory t))
    (when (and (backup-file-name-p file)
               (> (- current (float-time (fifth (file-attributes file))))
                  week))
      (message file)
      (delete-file file))))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Custom set variables
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(fringe-mode 0 nil (fringe))
 '(safe-local-variable-values (quote ((erlang-indent-level . 2))))
 '(tooltip-mode nil))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
)
(if window-system
    (custom-set-faces
     '(default ((t (:inherit nil :stipple nil :background "#272821" :foreground "#F8F8F2" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 120 :width normal :foundry "unknown" :family "ProggyCleanTTSZBP"))))
     '(mode-line ((t (:box nil))))
     '(mode-line-inactive ((t (:box nil))))
     '(whitespace-line ((t (:background "gray20" :foreground "#D62E00"))))))

;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Misc
;; Do a recompile once in a while to make startup faster
;(byte-recompile-directory "~/.emacs.d")
