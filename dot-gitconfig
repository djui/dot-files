[user]
	name = Uwe Dauernheim
	email = uwe@klarna.com
[core]
	editor = emacs -nw
[alias]
  glog  = log --graph --abbrev-commit --pretty=oneline
  lol   = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  lola  = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all
  # Called from the top-level dir. Pull from git://HOST/.
  serv  = daemon --reuseaddr --verbose  --base-path=. --export-all ./.git 
  st    = status --ignore-submodules
  ci    = commit
  br    = branch
  co    = checkout
  df    = diff --ignore-submodules
  lg    = log -p
  # all new commits after you fetched, with stats, but excluding merges
  lc    = log ORIG_HEAD.. --stat --no-merges
  in    = log HEAD..origin/master
  out   = log origin/master..HEAD
  # Recall that the commit which will be committed after we resolve this conflict
  # will have two parents instead of the usual one: one parent will be HEAD, the 
  # tip of the current branch; the other will be the tip of the other branch, 
  # which is stored temporarily in MERGE_HEAD.
  gitkconflict = !gitk --left-right HEAD...MERGE_HEAD
  # "pull" or "merge" always leaves the original tip of the current branch in ORIG_HEAD.
  # Hence, to see what a merge brought in, use the mdiff alias:
  mdiff = !gitk --left-right HEAD...ORIG_HEAD
  # Remove a file from the index: git unstage <file>
  unstage = reset HEAD --
  last = log -1 HEAD
  whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"     
  who = "!git shortlog -s -- | sort -n -k1"                                                             
  aliases = "!git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'"   
  swap = checkout "@{-1}"
[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto
[gui]
	recentrepo = /home/uwe/dev
	recentrepo = /home/uwe/dot-files
[merge]
  summary = true
  tool = "p4merge" 
[mergetool "p4merge"]
  cmd = p4merge "$PWD/$BASE" "$PWD/$LOCAL" "$PWD/$REMOTE" "$PWD/$MERGED" 
  keepBackup = false
  trustExitCode = false
[guitool "Ignore file"]
	cmd = echo "$FILENAME" >> .gitignore
	needsfile = yes
[guitool "Delete file"]
	cmd = git rm $FILENAME
	needsfile = yes
[push]
  # instead of pushing all branches with git push, you only push the current one.
  default = current
[core]
  # global per user gitignore file
  excludesfile = "~/.gitignore"
[github]
	user = uwe@dauernheim.net
	token = c7a71dca362884293fbfadda4ae71d05
